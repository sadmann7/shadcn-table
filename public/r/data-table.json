{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "data-table",
  "type": "registry:component",
  "title": "Data Table",
  "description": "A feature-rich data table component with server-side filtering, sorting, and pagination",
  "registryDependencies": [
    "button",
    "command",
    "dropdown-menu",
    "input",
    "popover",
    "select",
    "table"
  ],
  "files": [
    {
      "path": "src/registry/new-york/components/data-table/data-table.tsx",
      "content": "import { type Table as TanstackTable, flexRender } from \"@tanstack/react-table\";\nimport type * as React from \"react\";\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { getCommonPinningStyles } from \"@/lib/data-table\";\nimport { cn } from \"@/lib/utils\";\nimport { DataTablePagination } from \"@/registry/new-york/components/data-table/data-table-pagination\";\n\ninterface DataTableProps<TData> extends React.HTMLAttributes<HTMLDivElement> {\n  table: TanstackTable<TData>;\n  actionBar?: React.ReactNode;\n}\n\nexport function DataTable<TData>({\n  table,\n  actionBar,\n  children,\n  className,\n  ...props\n}: DataTableProps<TData>) {\n  return (\n    <div\n      className={cn(\"flex w-full flex-col gap-2.5 overflow-auto\", className)}\n      {...props}\n    >\n      {children}\n      <div className=\"overflow-hidden rounded-md border\">\n        <Table>\n          <TableHeader>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map((header) => (\n                  <TableHead\n                    key={header.id}\n                    colSpan={header.colSpan}\n                    style={{\n                      ...getCommonPinningStyles({ column: header.column }),\n                    }}\n                  >\n                    {header.isPlaceholder\n                      ? null\n                      : flexRender(\n                          header.column.columnDef.header,\n                          header.getContext(),\n                        )}\n                  </TableHead>\n                ))}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody>\n            {table.getRowModel().rows?.length ? (\n              table.getRowModel().rows.map((row) => (\n                <TableRow\n                  key={row.id}\n                  data-state={row.getIsSelected() && \"selected\"}\n                >\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell\n                      key={cell.id}\n                      style={{\n                        ...getCommonPinningStyles({ column: cell.column }),\n                      }}\n                    >\n                      {flexRender(\n                        cell.column.columnDef.cell,\n                        cell.getContext(),\n                      )}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell\n                  colSpan={table.getAllColumns().length}\n                  className=\"h-24 text-center\"\n                >\n                  No results.\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n      <div className=\"flex flex-col gap-2.5\">\n        <DataTablePagination table={table} />\n        {actionBar &&\n          table.getFilteredSelectedRowModel().rows.length > 0 &&\n          actionBar}\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/new-york/components/data-table/data-table-column-header.tsx",
      "content": "\"use client\";\n\nimport type { Column } from \"@tanstack/react-table\";\nimport {\n  ChevronDown,\n  ChevronUp,\n  ChevronsUpDown,\n  EyeOff,\n  X,\n} from \"lucide-react\";\n\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { cn } from \"@/lib/utils\";\n\ninterface DataTableColumnHeaderProps<TData, TValue>\n  extends React.HTMLAttributes<HTMLDivElement> {\n  column: Column<TData, TValue>;\n  title: string;\n}\n\nexport function DataTableColumnHeader<TData, TValue>({\n  column,\n  title,\n  className,\n}: DataTableColumnHeaderProps<TData, TValue>) {\n  if (!column.getCanSort() && !column.getCanHide()) {\n    return <div className={cn(className)}>{title}</div>;\n  }\n\n  return (\n    <div className={cn(\"flex items-center gap-2\", className)}>\n      <DropdownMenu>\n        <DropdownMenuTrigger className=\"-ml-1.5 flex h-8 items-center gap-1.5 rounded-md px-2 py-1.5 text-xs hover:bg-accent focus:outline-none focus:ring-1 focus:ring-ring data-[state=open]:bg-accent [&_svg]:size-4 [&_svg]:shrink-0 [&_svg]:text-muted-foreground\">\n          <span>{title}</span>\n          {column.getCanSort() &&\n            (column.getIsSorted() === \"desc\" ? (\n              <ChevronDown />\n            ) : column.getIsSorted() === \"asc\" ? (\n              <ChevronUp />\n            ) : (\n              <ChevronsUpDown />\n            ))}\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"start\" className=\"w-28\">\n          {column.getCanSort() && (\n            <>\n              <DropdownMenuCheckboxItem\n                className=\"relative pr-8 pl-2 [&>span:first-child]:right-2 [&>span:first-child]:left-auto [&_svg]:text-muted-foreground\"\n                checked={column.getIsSorted() === \"asc\"}\n                onClick={() => column.toggleSorting(false)}\n              >\n                <ChevronUp />\n                Asc\n              </DropdownMenuCheckboxItem>\n              <DropdownMenuCheckboxItem\n                className=\"relative pr-8 pl-2 [&>span:first-child]:right-2 [&>span:first-child]:left-auto [&_svg]:text-muted-foreground\"\n                checked={column.getIsSorted() === \"desc\"}\n                onClick={() => column.toggleSorting(true)}\n              >\n                <ChevronDown />\n                Desc\n              </DropdownMenuCheckboxItem>\n              {column.getIsSorted() && (\n                <DropdownMenuItem\n                  className=\"pl-2 [&_svg]:text-muted-foreground\"\n                  onClick={() => column.clearSorting()}\n                >\n                  <X />\n                  Reset\n                </DropdownMenuItem>\n              )}\n            </>\n          )}\n          {column.getCanHide() && (\n            <DropdownMenuCheckboxItem\n              className=\"relative pr-8 pl-2 [&>span:first-child]:right-2 [&>span:first-child]:left-auto [&_svg]:text-muted-foreground\"\n              checked={!column.getIsVisible()}\n              onClick={() => column.toggleVisibility(false)}\n            >\n              <EyeOff />\n              Hide\n            </DropdownMenuCheckboxItem>\n          )}\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/new-york/components/data-table/data-table-pagination.tsx",
      "content": "import type { Table } from \"@tanstack/react-table\";\nimport {\n  ChevronLeft,\n  ChevronRight,\n  ChevronsLeft,\n  ChevronsRight,\n} from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\ninterface DataTablePaginationProps<TData> {\n  table: Table<TData>;\n  pageSizeOptions?: number[];\n}\n\nexport function DataTablePagination<TData>({\n  table,\n  pageSizeOptions = [10, 20, 30, 40, 50],\n}: DataTablePaginationProps<TData>) {\n  return (\n    <div className=\"flex w-full flex-col-reverse items-center justify-between gap-4 overflow-auto p-1 sm:flex-row sm:gap-8\">\n      <div className=\"flex-1 whitespace-nowrap text-muted-foreground text-sm\">\n        {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\n        {table.getFilteredRowModel().rows.length} row(s) selected.\n      </div>\n      <div className=\"flex flex-col-reverse items-center gap-4 sm:flex-row sm:gap-6 lg:gap-8\">\n        <div className=\"flex items-center space-x-2\">\n          <p className=\"whitespace-nowrap font-medium text-sm\">Rows per page</p>\n          <Select\n            value={`${table.getState().pagination.pageSize}`}\n            onValueChange={(value) => {\n              table.setPageSize(Number(value));\n            }}\n          >\n            <SelectTrigger size=\"sm\" className=\"w-[4.5rem]\">\n              <SelectValue placeholder={table.getState().pagination.pageSize} />\n            </SelectTrigger>\n            <SelectContent side=\"top\">\n              {pageSizeOptions.map((pageSize) => (\n                <SelectItem key={pageSize} value={`${pageSize}`}>\n                  {pageSize}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        <div className=\"flex items-center justify-center font-medium text-sm\">\n          Page {table.getState().pagination.pageIndex + 1} of{\" \"}\n          {table.getPageCount()}\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            aria-label=\"Go to first page\"\n            variant=\"outline\"\n            size=\"icon\"\n            className=\"hidden size-8 lg:flex\"\n            onClick={() => table.setPageIndex(0)}\n            disabled={!table.getCanPreviousPage()}\n          >\n            <ChevronsLeft />\n          </Button>\n          <Button\n            aria-label=\"Go to previous page\"\n            variant=\"outline\"\n            size=\"icon\"\n            className=\"size-8\"\n            onClick={() => table.previousPage()}\n            disabled={!table.getCanPreviousPage()}\n          >\n            <ChevronLeft />\n          </Button>\n          <Button\n            aria-label=\"Go to next page\"\n            variant=\"outline\"\n            size=\"icon\"\n            className=\"size-8\"\n            onClick={() => table.nextPage()}\n            disabled={!table.getCanNextPage()}\n          >\n            <ChevronRight />\n          </Button>\n          <Button\n            aria-label=\"Go to last page\"\n            variant=\"outline\"\n            size=\"icon\"\n            className=\"hidden size-8 lg:flex\"\n            onClick={() => table.setPageIndex(table.getPageCount() - 1)}\n            disabled={!table.getCanNextPage()}\n          >\n            <ChevronsRight />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/new-york/components/data-table/data-table-view-options.tsx",
      "content": "\"use client\";\n\nimport type { Table } from \"@tanstack/react-table\";\nimport { Check, ChevronsUpDown, Settings2 } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { cn } from \"@/lib/utils\";\nimport * as React from \"react\";\ninterface DataTableViewOptionsProps<TData> {\n  table: Table<TData>;\n}\n\nexport function DataTableViewOptions<TData>({\n  table,\n}: DataTableViewOptionsProps<TData>) {\n  const columns = React.useMemo(\n    () =>\n      table\n        .getAllColumns()\n        .filter(\n          (column) =>\n            typeof column.accessorFn !== \"undefined\" && column.getCanHide(),\n        ),\n    [table],\n  );\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button\n          aria-label=\"Toggle columns\"\n          role=\"combobox\"\n          variant=\"outline\"\n          size=\"sm\"\n          className=\"ml-auto hidden h-8 lg:flex\"\n        >\n          <Settings2 />\n          View\n          <ChevronsUpDown className=\"ml-auto opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent align=\"end\" className=\"w-44 p-0\">\n        <Command>\n          <CommandInput placeholder=\"Search columns...\" />\n          <CommandList>\n            <CommandEmpty>No columns found.</CommandEmpty>\n            <CommandGroup>\n              {columns.map((column) => (\n                <CommandItem\n                  key={column.id}\n                  onSelect={() =>\n                    column.toggleVisibility(!column.getIsVisible())\n                  }\n                >\n                  <span className=\"truncate\">\n                    {column.columnDef.meta?.label ?? column.id}\n                  </span>\n                  <Check\n                    className={cn(\n                      \"ml-auto size-4 shrink-0\",\n                      column.getIsVisible() ? \"opacity-100\" : \"opacity-0\",\n                    )}\n                  />\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/new-york/components/data-table/data-table-faceted-filter.tsx",
      "content": "\"use client\";\n\nimport type { Option } from \"@/registry/new-york/types/data-table\";\nimport type { Column } from \"@tanstack/react-table\";\nimport { Check, PlusCircle, XCircle } from \"lucide-react\";\n\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n} from \"@/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { cn } from \"@/lib/utils\";\nimport * as React from \"react\";\n\ninterface DataTableFacetedFilterProps<TData, TValue> {\n  column?: Column<TData, TValue>;\n  title?: string;\n  options: Option[];\n  multiple?: boolean;\n}\n\nexport function DataTableFacetedFilter<TData, TValue>({\n  column,\n  title,\n  options,\n  multiple,\n}: DataTableFacetedFilterProps<TData, TValue>) {\n  const [open, setOpen] = React.useState(false);\n\n  const columnFilterValue = column?.getFilterValue();\n  const selectedValues = new Set(\n    Array.isArray(columnFilterValue) ? columnFilterValue : [],\n  );\n\n  const onItemSelect = React.useCallback(\n    (option: Option, isSelected: boolean) => {\n      if (!column) return;\n\n      if (multiple) {\n        const newSelectedValues = new Set(selectedValues);\n        if (isSelected) {\n          newSelectedValues.delete(option.value);\n        } else {\n          newSelectedValues.add(option.value);\n        }\n        const filterValues = Array.from(newSelectedValues);\n        column.setFilterValue(filterValues.length ? filterValues : undefined);\n      } else {\n        column.setFilterValue(isSelected ? undefined : [option.value]);\n        setOpen(false);\n      }\n    },\n    [column, multiple, selectedValues],\n  );\n\n  const onReset = React.useCallback(\n    (event?: React.MouseEvent) => {\n      event?.stopPropagation();\n      column?.setFilterValue(undefined);\n    },\n    [column],\n  );\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button variant=\"outline\" size=\"sm\" className=\"border-dashed\">\n          {selectedValues?.size > 0 ? (\n            <div\n              aria-label={`Clear ${title} filter`}\n              role=\"button\"\n              tabIndex={0}\n              onClick={onReset}\n              className=\"rounded-sm opacity-70 transition-opacity hover:opacity-100 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring\"\n            >\n              <XCircle />\n            </div>\n          ) : (\n            <PlusCircle />\n          )}\n          {title}\n          {selectedValues?.size > 0 && (\n            <>\n              <Separator orientation=\"vertical\" className=\"mx-0.5 h-4\" />\n              <Badge\n                variant=\"secondary\"\n                className=\"rounded-sm px-1 font-normal lg:hidden\"\n              >\n                {selectedValues.size}\n              </Badge>\n              <div className=\"hidden items-center gap-1 lg:flex\">\n                {selectedValues.size > 2 ? (\n                  <Badge\n                    variant=\"secondary\"\n                    className=\"rounded-sm px-1 font-normal\"\n                  >\n                    {selectedValues.size} selected\n                  </Badge>\n                ) : (\n                  options\n                    .filter((option) => selectedValues.has(option.value))\n                    .map((option) => (\n                      <Badge\n                        variant=\"secondary\"\n                        key={option.value}\n                        className=\"rounded-sm px-1 font-normal\"\n                      >\n                        {option.label}\n                      </Badge>\n                    ))\n                )}\n              </div>\n            </>\n          )}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[12.5rem] p-0\" align=\"start\">\n        <Command>\n          <CommandInput placeholder={title} />\n          <CommandList className=\"max-h-full\">\n            <CommandEmpty>No results found.</CommandEmpty>\n            <CommandGroup className=\"max-h-[18.75rem] overflow-y-auto overflow-x-hidden\">\n              {options.map((option) => {\n                const isSelected = selectedValues.has(option.value);\n\n                return (\n                  <CommandItem\n                    key={option.value}\n                    onSelect={() => onItemSelect(option, isSelected)}\n                  >\n                    <div\n                      className={cn(\n                        \"flex size-4 items-center justify-center rounded-sm border border-primary\",\n                        isSelected\n                          ? \"bg-primary\"\n                          : \"opacity-50 [&_svg]:invisible\",\n                      )}\n                    >\n                      <Check />\n                    </div>\n                    {option.icon && <option.icon />}\n                    <span className=\"truncate\">{option.label}</span>\n                    {option.count && (\n                      <span className=\"ml-auto font-mono text-xs\">\n                        {option.count}\n                      </span>\n                    )}\n                  </CommandItem>\n                );\n              })}\n            </CommandGroup>\n            {selectedValues.size > 0 && (\n              <>\n                <CommandSeparator />\n                <CommandGroup>\n                  <CommandItem\n                    onSelect={() => onReset()}\n                    className=\"justify-center text-center\"\n                  >\n                    Clear filters\n                  </CommandItem>\n                </CommandGroup>\n              </>\n            )}\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/new-york/components/data-table/data-table-filter-list.tsx",
      "content": "\"use client\";\n\nimport type { Column, Table } from \"@tanstack/react-table\";\nimport {\n  CalendarIcon,\n  Check,\n  ChevronsUpDown,\n  GripVertical,\n  ListFilter,\n  Trash2,\n} from \"lucide-react\";\nimport { parseAsStringEnum, useQueryState } from \"nuqs\";\nimport * as React from \"react\";\n\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Sortable,\n  SortableContent,\n  SortableItem,\n  SortableItemHandle,\n  SortableOverlay,\n} from \"@/components/ui/sortable\";\nimport { dataTableConfig } from \"@/config/data-table\";\nimport { getDefaultFilterOperator, getFilterOperators } from \"@/lib/data-table\";\nimport { cn } from \"@/lib/utils\";\nimport { DataTableRangeFilter } from \"@/registry/new-york/components/data-table/data-table-range-filter\";\nimport {\n  Faceted,\n  FacetedBadgeList,\n  FacetedContent,\n  FacetedEmpty,\n  FacetedGroup,\n  FacetedInput,\n  FacetedItem,\n  FacetedList,\n  FacetedTrigger,\n} from \"@/registry/new-york/components/ui/faceted\";\nimport { useDebouncedCallback } from \"@/registry/new-york/hooks/use-debounced-callback\";\nimport { formatDate } from \"@/registry/new-york/lib/format\";\nimport { generateId } from \"@/registry/new-york/lib/id\";\nimport { getFiltersStateParser } from \"@/registry/new-york/lib/parsers\";\nimport type {\n  ExtendedColumnFilter,\n  FilterOperator,\n  JoinOperator,\n} from \"@/registry/new-york/types/data-table\";\nimport type { PopoverContentProps } from \"@radix-ui/react-popover\";\n\nconst FILTERS_KEY = \"filters\";\nconst JOIN_OPERATOR_KEY = \"joinOperator\";\nconst DEBOUNCE_MS = 300;\nconst THROTTLE_MS = 50;\n\ninterface DataTableFilterListProps<TData>\n  extends Pick<\n    PopoverContentProps,\n    \"align\" | \"alignOffset\" | \"collisionPadding\" | \"side\" | \"sideOffset\"\n  > {\n  table: Table<TData>;\n  debounceMs?: number;\n  throttleMs?: number;\n  shallow?: boolean;\n}\n\nexport function DataTableFilterList<TData>({\n  table,\n  debounceMs = DEBOUNCE_MS,\n  throttleMs = THROTTLE_MS,\n  shallow = true,\n  align = \"center\",\n  side = \"bottom\",\n  alignOffset = 0,\n  sideOffset = 4,\n  collisionPadding = 16,\n}: DataTableFilterListProps<TData>) {\n  const id = React.useId();\n  const labelId = React.useId();\n  const descriptionId = React.useId();\n\n  const columns = React.useMemo(() => {\n    return table\n      .getAllColumns()\n      .filter((column) => column.columnDef.enableColumnFilter);\n  }, [table]);\n\n  const [filters, setFilters] = useQueryState(\n    FILTERS_KEY,\n    getFiltersStateParser<TData>(columns.map((field) => field.id))\n      .withDefault([])\n      .withOptions({\n        clearOnDefault: true,\n        shallow,\n        throttleMs,\n      }),\n  );\n  const debouncedSetFilters = useDebouncedCallback(setFilters, debounceMs);\n\n  const [joinOperator, setJoinOperator] = useQueryState(\n    JOIN_OPERATOR_KEY,\n    parseAsStringEnum([\"and\", \"or\"]).withDefault(\"and\").withOptions({\n      clearOnDefault: true,\n      shallow,\n    }),\n  );\n\n  const onFilterAdd = React.useCallback(() => {\n    const column = columns[0];\n\n    if (!column) return;\n\n    const newFilter: ExtendedColumnFilter<TData> = {\n      id: column.id as Extract<keyof TData, string>,\n      value: \"\",\n      variant: column.columnDef.meta?.variant ?? \"text\",\n      operator: getDefaultFilterOperator(\n        column.columnDef.meta?.variant ?? \"text\",\n      ),\n      filterId: generateId({ length: 8 }),\n    };\n\n    debouncedSetFilters([...filters, newFilter]);\n  }, [columns, filters, debouncedSetFilters]);\n\n  const onFilterUpdate = React.useCallback(\n    (\n      filterId: string,\n      updates: Partial<Omit<ExtendedColumnFilter<TData>, \"filterId\">>,\n    ) => {\n      debouncedSetFilters((prevFilters) => {\n        const updatedFilters = prevFilters.map((filter) => {\n          if (filter.filterId === filterId) {\n            return { ...filter, ...updates } as ExtendedColumnFilter<TData>;\n          }\n          return filter;\n        });\n        return updatedFilters;\n      });\n    },\n    [debouncedSetFilters],\n  );\n\n  const onFilterRemove = React.useCallback(\n    (filterId: string) => {\n      const updatedFilters = filters.filter(\n        (filter) => filter.filterId !== filterId,\n      );\n      void setFilters(updatedFilters);\n    },\n    [filters, setFilters],\n  );\n\n  const onFiltersReset = React.useCallback(() => {\n    void setFilters(null);\n    void setJoinOperator(\"and\");\n  }, [setFilters, setJoinOperator]);\n\n  return (\n    <Sortable\n      value={filters}\n      onValueChange={setFilters}\n      getItemValue={(item) => item.filterId}\n    >\n      <Popover>\n        <PopoverTrigger asChild>\n          <Button variant=\"outline\" size=\"sm\">\n            <ListFilter />\n            Filters\n            {filters.length > 0 && (\n              <Badge\n                variant=\"secondary\"\n                className=\"h-[1.14rem] rounded-[0.2rem] px-[0.32rem] font-mono font-normal text-[0.65rem]\"\n              >\n                {filters.length}\n              </Badge>\n            )}\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent\n          aria-describedby={descriptionId}\n          aria-labelledby={labelId}\n          align={align}\n          alignOffset={alignOffset}\n          collisionPadding={collisionPadding}\n          side={side}\n          sideOffset={sideOffset}\n          className=\"flex w-[calc(100vw-(--spacing(12)))] origin-[var(--radix-popover-content-transform-origin)] flex-col gap-3.5 p-4 sm:w-[var(--radix-popover-content-width)] sm:min-w-[25rem]\"\n        >\n          <div className=\"flex flex-col gap-1\">\n            <h4 id={labelId} className=\"font-medium leading-none\">\n              {filters.length > 0 ? \"Filters\" : \"No filters applied\"}\n            </h4>\n            <p\n              id={descriptionId}\n              className={cn(\n                \"text-muted-foreground text-sm\",\n                filters.length > 0 && \"sr-only\",\n              )}\n            >\n              {filters.length > 0\n                ? \"Modify filters to refine your results.\"\n                : \"Add filters to refine your results.\"}\n            </p>\n          </div>\n          {filters.length > 0 ? (\n            <SortableContent asChild>\n              <div\n                role=\"list\"\n                className=\"flex max-h-[300px] flex-col gap-2 overflow-y-auto py-0.5 pr-1\"\n              >\n                {filters.map((filter, index) => (\n                  <FilterItem<TData>\n                    key={filter.filterId}\n                    filter={filter}\n                    index={index}\n                    filterItemId={`${id}-filter-${filter.filterId}`}\n                    joinOperator={joinOperator}\n                    setJoinOperator={setJoinOperator}\n                    columns={columns}\n                    onFilterUpdate={onFilterUpdate}\n                    onFilterRemove={onFilterRemove}\n                  />\n                ))}\n              </div>\n            </SortableContent>\n          ) : null}\n          <div className=\"flex w-full items-center gap-2\">\n            <Button size=\"sm\" className=\"rounded\" onClick={onFilterAdd}>\n              Add filter\n            </Button>\n            {filters.length > 0 ? (\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"rounded\"\n                onClick={onFiltersReset}\n              >\n                Reset filters\n              </Button>\n            ) : null}\n          </div>\n        </PopoverContent>\n      </Popover>\n      <SortableOverlay>\n        <div className=\"flex items-center gap-2\">\n          <div className=\"h-8 min-w-[4.5rem] rounded-sm bg-primary/10\" />\n          <div className=\"h-8 w-32 rounded-sm bg-primary/10\" />\n          <div className=\"h-8 w-32 rounded-sm bg-primary/10\" />\n          <div className=\"h-8 min-w-36 flex-1 rounded-sm bg-primary/10\" />\n          <div className=\"size-8 shrink-0 rounded-sm bg-primary/10\" />\n          <div className=\"size-8 shrink-0 rounded-sm bg-primary/10\" />\n        </div>\n      </SortableOverlay>\n    </Sortable>\n  );\n}\n\ninterface FilterItemProps<TData> {\n  filter: ExtendedColumnFilter<TData>;\n  index: number;\n  filterItemId: string;\n  joinOperator: JoinOperator;\n  setJoinOperator: (value: JoinOperator) => void;\n  columns: Column<TData>[];\n  onFilterUpdate: (\n    filterId: string,\n    updates: Partial<Omit<ExtendedColumnFilter<TData>, \"filterId\">>,\n  ) => void;\n  onFilterRemove: (filterId: string) => void;\n}\n\nfunction FilterItem<TData>({\n  filter,\n  index,\n  filterItemId,\n  joinOperator,\n  setJoinOperator,\n  columns,\n  onFilterUpdate,\n  onFilterRemove,\n}: FilterItemProps<TData>) {\n  const joinOperatorListboxId = `${filterItemId}-join-operator-listbox`;\n  const fieldListboxId = `${filterItemId}-field-listbox`;\n  const operatorListboxId = `${filterItemId}-operator-listbox`;\n  const inputId = `${filterItemId}-input`;\n  const [showFieldSelector, setShowFieldSelector] = React.useState(false);\n\n  const onFilterInputRender = React.useCallback(\n    ({\n      filter,\n      inputId,\n    }: { filter: ExtendedColumnFilter<TData>; inputId: string }) => {\n      const column = columns.find((f) => f.id === filter.id);\n\n      if (!column) return null;\n\n      if (filter.operator === \"isEmpty\" || filter.operator === \"isNotEmpty\") {\n        return (\n          <div\n            id={inputId}\n            role=\"status\"\n            aria-live=\"polite\"\n            aria-label={`${column.columnDef.meta?.label} filter is ${\n              filter.operator === \"isEmpty\" ? \"empty\" : \"not empty\"\n            }`}\n            className=\"h-8 w-full rounded border border-dashed\"\n          />\n        );\n      }\n\n      switch (filter.variant) {\n        case \"text\":\n        case \"number\":\n        case \"range\": {\n          if (\n            (filter.variant === \"range\" && filter.operator === \"isBetween\") ||\n            filter.operator === \"isBetween\"\n          ) {\n            return (\n              <DataTableRangeFilter\n                filter={filter}\n                column={column}\n                inputId={inputId}\n                onFilterUpdate={onFilterUpdate}\n              />\n            );\n          }\n\n          const isNumber =\n            filter.variant === \"number\" || filter.variant === \"range\";\n\n          return (\n            <Input\n              id={inputId}\n              type={isNumber ? \"number\" : filter.variant}\n              aria-label={`${column.columnDef.meta?.label} filter value`}\n              aria-describedby={`${inputId}-description`}\n              inputMode={isNumber ? \"numeric\" : undefined}\n              placeholder={\n                column.columnDef.meta?.placeholder ?? \"Enter a value...\"\n              }\n              className=\"h-8 w-full rounded\"\n              defaultValue={\n                typeof filter.value === \"string\" ? filter.value : undefined\n              }\n              onChange={(event) =>\n                onFilterUpdate(filter.filterId, {\n                  value: event.target.value,\n                })\n              }\n            />\n          );\n        }\n\n        case \"boolean\": {\n          if (Array.isArray(filter.value)) return null;\n\n          return (\n            <Select\n              value={filter.value}\n              onValueChange={(value) =>\n                onFilterUpdate(filter.filterId, {\n                  value,\n                })\n              }\n            >\n              <SelectTrigger\n                id={inputId}\n                aria-controls={`${inputId}-listbox`}\n                aria-label={`${column.columnDef.meta?.label} boolean filter`}\n                className=\"h-8 w-full rounded [&[data-size]]:h-8\"\n              >\n                <SelectValue placeholder={filter.value ? \"True\" : \"False\"} />\n              </SelectTrigger>\n              <SelectContent id={`${inputId}-listbox`}>\n                <SelectItem value=\"true\">True</SelectItem>\n                <SelectItem value=\"false\">False</SelectItem>\n              </SelectContent>\n            </Select>\n          );\n        }\n\n        case \"select\":\n          return (\n            <Faceted\n              value={\n                typeof filter.value === \"string\" ? filter.value : undefined\n              }\n              onValueChange={(value) => {\n                onFilterUpdate(filter.filterId, {\n                  value,\n                });\n              }}\n            >\n              <FacetedTrigger asChild>\n                <Button\n                  id={inputId}\n                  aria-controls={`${inputId}-listbox`}\n                  aria-label={`${column.columnDef.meta?.label} filter value`}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"w-full rounded font-normal\"\n                >\n                  <FacetedBadgeList\n                    options={column.columnDef.meta?.options}\n                    placeholder={\n                      column.columnDef.meta?.placeholder ??\n                      \"Select an option...\"\n                    }\n                  />\n                </Button>\n              </FacetedTrigger>\n              <FacetedContent\n                id={`${inputId}-listbox`}\n                className=\"w-[12.5rem] origin-[var(--radix-popover-content-transform-origin)]\"\n              >\n                <FacetedInput\n                  aria-label={`Search ${column.columnDef.meta?.label} options`}\n                  placeholder={\n                    column.columnDef.meta?.placeholder ?? \"Search options...\"\n                  }\n                />\n                <FacetedList>\n                  <FacetedEmpty>No options found.</FacetedEmpty>\n                  <FacetedGroup>\n                    {column.columnDef.meta?.options?.map((option) => (\n                      <FacetedItem key={option.value} value={option.value}>\n                        {option.icon && <option.icon />}\n                        <span>{option.label}</span>\n                        {option.count && (\n                          <span className=\"ml-auto font-mono text-xs\">\n                            {option.count}\n                          </span>\n                        )}\n                      </FacetedItem>\n                    ))}\n                  </FacetedGroup>\n                </FacetedList>\n              </FacetedContent>\n            </Faceted>\n          );\n\n        case \"multi-select\": {\n          const selectedValues = Array.isArray(filter.value)\n            ? filter.value\n            : [];\n\n          return (\n            <Faceted\n              multiple\n              value={selectedValues as string[]}\n              onValueChange={(value) => {\n                onFilterUpdate(filter.filterId, {\n                  value,\n                });\n              }}\n            >\n              <FacetedTrigger asChild>\n                <Button\n                  id={inputId}\n                  aria-controls={`${inputId}-listbox`}\n                  aria-label={`${column.columnDef.meta?.label} filter values`}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"w-full rounded font-normal\"\n                >\n                  <FacetedBadgeList\n                    options={column.columnDef.meta?.options}\n                    placeholder={\n                      column.columnDef.meta?.placeholder ?? \" Select options...\"\n                    }\n                  />\n                </Button>\n              </FacetedTrigger>\n              <FacetedContent id={`${inputId}-listbox`}>\n                <FacetedInput\n                  aria-label={`Search ${column.columnDef.meta?.label} options`}\n                  placeholder={\n                    column.columnDef.meta?.placeholder ?? \"Search options...\"\n                  }\n                />\n                <FacetedList>\n                  <FacetedEmpty>No options found.</FacetedEmpty>\n                  <FacetedGroup>\n                    {column.columnDef.meta?.options?.map((option) => (\n                      <FacetedItem key={option.value} value={option.value}>\n                        {option.icon && <option.icon />}\n                        <span>{option.label}</span>\n                        {option.count && (\n                          <span className=\"ml-auto font-mono text-xs\">\n                            {option.count}\n                          </span>\n                        )}\n                      </FacetedItem>\n                    ))}\n                  </FacetedGroup>\n                </FacetedList>\n              </FacetedContent>\n            </Faceted>\n          );\n        }\n\n        case \"date\":\n        case \"date-range\": {\n          const dateValue = Array.isArray(filter.value)\n            ? filter.value.filter(Boolean)\n            : [filter.value, filter.value].filter(Boolean);\n\n          const displayValue =\n            filter.operator === \"isBetween\" && dateValue.length === 2\n              ? `${formatDate(new Date(Number(dateValue[0])))} - ${formatDate(\n                  new Date(Number(dateValue[1])),\n                )}`\n              : dateValue[0]\n                ? formatDate(new Date(Number(dateValue[0])))\n                : \"Pick a date\";\n\n          return (\n            <Popover>\n              <PopoverTrigger asChild>\n                <Button\n                  id={inputId}\n                  aria-controls={`${inputId}-calendar`}\n                  aria-label={`${column.columnDef.meta?.label} date filter`}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className={cn(\n                    \"w-full justify-start rounded text-left font-normal\",\n                    !filter.value && \"text-muted-foreground\",\n                  )}\n                >\n                  <CalendarIcon />\n                  <span className=\"truncate\">{displayValue}</span>\n                </Button>\n              </PopoverTrigger>\n              <PopoverContent\n                id={`${inputId}-calendar`}\n                align=\"start\"\n                className=\"w-auto origin-[var(--radix-popover-content-transform-origin)] p-0\"\n              >\n                {filter.operator === \"isBetween\" ? (\n                  <Calendar\n                    id={`${inputId}-calendar`}\n                    aria-label={`Select ${column.columnDef.meta?.label} date range`}\n                    mode=\"range\"\n                    initialFocus\n                    selected={\n                      dateValue.length === 2\n                        ? {\n                            from: new Date(Number(dateValue[0])),\n                            to: new Date(Number(dateValue[1])),\n                          }\n                        : {\n                            from: new Date(),\n                            to: new Date(),\n                          }\n                    }\n                    onSelect={(date) => {\n                      onFilterUpdate(filter.filterId, {\n                        value: date\n                          ? [\n                              (date.from?.getTime() ?? \"\").toString(),\n                              (date.to?.getTime() ?? \"\").toString(),\n                            ]\n                          : [],\n                      });\n                    }}\n                  />\n                ) : (\n                  <Calendar\n                    id={`${inputId}-calendar`}\n                    aria-label={`Select ${column.columnDef.meta?.label} date`}\n                    mode=\"single\"\n                    initialFocus\n                    selected={\n                      dateValue[0] ? new Date(Number(dateValue[0])) : undefined\n                    }\n                    onSelect={(date) => {\n                      onFilterUpdate(filter.filterId, {\n                        value: (date?.getTime() ?? \"\").toString(),\n                      });\n                    }}\n                  />\n                )}\n              </PopoverContent>\n            </Popover>\n          );\n        }\n\n        default:\n          return null;\n      }\n    },\n    [columns, onFilterUpdate],\n  );\n\n  return (\n    <SortableItem value={filter.filterId} asChild>\n      <div\n        role=\"listitem\"\n        id={filterItemId}\n        tabIndex={-1}\n        className=\"flex items-center gap-2\"\n      >\n        <div className=\"min-w-[4.5rem] text-center\">\n          {index === 0 ? (\n            <span className=\"text-muted-foreground text-sm\">Where</span>\n          ) : index === 1 ? (\n            <Select\n              value={joinOperator}\n              onValueChange={(value: JoinOperator) => setJoinOperator(value)}\n            >\n              <SelectTrigger\n                aria-label=\"Select join operator\"\n                aria-controls={joinOperatorListboxId}\n                className=\"h-8 rounded lowercase [&[data-size]]:h-8\"\n              >\n                <SelectValue placeholder={joinOperator} />\n              </SelectTrigger>\n              <SelectContent\n                id={joinOperatorListboxId}\n                position=\"popper\"\n                className=\"min-w-(--radix-select-trigger-width) lowercase\"\n              >\n                {dataTableConfig.joinOperators.map((joinOperator) => (\n                  <SelectItem key={joinOperator} value={joinOperator}>\n                    {joinOperator}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          ) : (\n            <span className=\"text-muted-foreground text-sm\">\n              {joinOperator}\n            </span>\n          )}\n        </div>\n        <Popover open={showFieldSelector} onOpenChange={setShowFieldSelector}>\n          <PopoverTrigger asChild>\n            <Button\n              role=\"combobox\"\n              aria-controls={fieldListboxId}\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"w-32 justify-between rounded font-normal\"\n            >\n              <span className=\"truncate\">\n                {columns.find((field) => field.id === filter.id)?.columnDef.meta\n                  ?.label ?? \"Select field\"}\n              </span>\n              <ChevronsUpDown className=\"opacity-50\" />\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent\n            id={fieldListboxId}\n            align=\"start\"\n            className=\"w-40 origin-[var(--radix-popover-content-transform-origin)] p-0\"\n          >\n            <Command>\n              <CommandInput placeholder=\"Search fields...\" />\n              <CommandList>\n                <CommandEmpty>No fields found.</CommandEmpty>\n                <CommandGroup>\n                  {columns.map((column) => (\n                    <CommandItem\n                      key={column.id}\n                      value={column.id}\n                      onSelect={(value) => {\n                        const column = columns.find((col) => col.id === value);\n\n                        if (!column) return;\n\n                        onFilterUpdate(filter.filterId, {\n                          id: value as Extract<keyof TData, string>,\n                          variant: column.columnDef.meta?.variant ?? \"text\",\n                          operator: getDefaultFilterOperator(\n                            column.columnDef.meta?.variant ?? \"text\",\n                          ),\n                          value: \"\",\n                        });\n\n                        setShowFieldSelector(false);\n                      }}\n                    >\n                      <span className=\"truncate\">\n                        {column.columnDef.meta?.label}\n                      </span>\n                      <Check\n                        className={cn(\n                          \"ml-auto\",\n                          column.id === filter.id ? \"opacity-100\" : \"opacity-0\",\n                        )}\n                      />\n                    </CommandItem>\n                  ))}\n                </CommandGroup>\n              </CommandList>\n            </Command>\n          </PopoverContent>\n        </Popover>\n        <Select\n          value={filter.operator}\n          onValueChange={(value: FilterOperator) =>\n            onFilterUpdate(filter.filterId, {\n              operator: value,\n              value:\n                value === \"isEmpty\" || value === \"isNotEmpty\"\n                  ? \"\"\n                  : filter.value,\n            })\n          }\n        >\n          <SelectTrigger\n            aria-controls={operatorListboxId}\n            className=\"h-8 w-32 rounded lowercase [&[data-size]]:h-8\"\n          >\n            <div className=\"truncate\">\n              <SelectValue placeholder={filter.operator} />\n            </div>\n          </SelectTrigger>\n          <SelectContent\n            id={operatorListboxId}\n            className=\"origin-[var(--radix-select-content-transform-origin)]\"\n          >\n            {getFilterOperators(filter.variant).map((operator) => (\n              <SelectItem\n                key={operator.value}\n                value={operator.value}\n                className=\"lowercase\"\n              >\n                {operator.label}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n        <div className=\"min-w-36 flex-1\">\n          {onFilterInputRender({ filter, inputId })}\n        </div>\n        <Button\n          aria-controls={filterItemId}\n          variant=\"outline\"\n          size=\"icon\"\n          className=\"size-8 rounded\"\n          onClick={() => onFilterRemove(filter.filterId)}\n        >\n          <Trash2 />\n        </Button>\n        <SortableItemHandle asChild>\n          <Button variant=\"outline\" size=\"icon\" className=\"size-8 rounded\">\n            <GripVertical />\n          </Button>\n        </SortableItemHandle>\n      </div>\n    </SortableItem>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/new-york/components/data-table/data-table-filter-menu.tsx",
      "content": "\"use client\";\n\nimport type { Column, Table } from \"@tanstack/react-table\";\nimport {\n  BadgeCheck,\n  CalendarIcon,\n  Check,\n  ListFilter,\n  Text,\n  X,\n} from \"lucide-react\";\nimport { useQueryState } from \"nuqs\";\nimport * as React from \"react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { getDefaultFilterOperator, getFilterOperators } from \"@/lib/data-table\";\nimport { cn } from \"@/lib/utils\";\nimport { useDebouncedCallback } from \"@/registry/new-york/hooks/use-debounced-callback\";\nimport { formatDate } from \"@/registry/new-york/lib/format\";\nimport { generateId } from \"@/registry/new-york/lib/id\";\nimport { getFiltersStateParser } from \"@/registry/new-york/lib/parsers\";\nimport type {\n  ExtendedColumnFilter,\n  FilterOperator,\n} from \"@/registry/new-york/types/data-table\";\nimport { DataTableRangeFilter } from \"./data-table-range-filter\";\n\nconst FILTERS_KEY = \"filters\";\nconst DEBOUNCE_MS = 300;\nconst THROTTLE_MS = 50;\n\ninterface DataTableFilterMenuProps<TData> {\n  table: Table<TData>;\n  debounceMs?: number;\n  throttleMs?: number;\n  shallow?: boolean;\n}\n\nexport function DataTableFilterMenu<TData>({\n  table,\n  debounceMs = DEBOUNCE_MS,\n  throttleMs = THROTTLE_MS,\n  shallow = true,\n}: DataTableFilterMenuProps<TData>) {\n  const id = React.useId();\n\n  const columns = React.useMemo(() => {\n    return table\n      .getAllColumns()\n      .filter((column) => column.columnDef.enableColumnFilter);\n  }, [table]);\n\n  const [open, setOpen] = React.useState(false);\n  const [selectedColumn, setSelectedColumn] =\n    React.useState<Column<TData> | null>(null);\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const inputRef = React.useRef<HTMLInputElement>(null);\n\n  const onInputKeyDown = React.useCallback(\n    (event: React.KeyboardEvent<HTMLInputElement>) => {\n      if (event.key === \"Backspace\" && !inputValue && selectedColumn) {\n        event.preventDefault();\n        setSelectedColumn(null);\n      }\n    },\n    [inputValue, selectedColumn],\n  );\n\n  const [filters, setFilters] = useQueryState(\n    FILTERS_KEY,\n    getFiltersStateParser<TData>(columns.map((field) => field.id))\n      .withDefault([])\n      .withOptions({\n        clearOnDefault: true,\n        shallow,\n        throttleMs,\n      }),\n  );\n  const debouncedSetFilters = useDebouncedCallback(setFilters, debounceMs);\n\n  const onFilterAdd = React.useCallback(\n    (column: Column<TData>, value: string) => {\n      if (!value.trim() && column.columnDef.meta?.variant !== \"boolean\") {\n        return;\n      }\n\n      const filterValue =\n        column.columnDef.meta?.variant === \"multi-select\" ? [value] : value;\n\n      const newFilter: ExtendedColumnFilter<TData> = {\n        id: column.id as Extract<keyof TData, string>,\n        value: filterValue,\n        variant: column.columnDef.meta?.variant ?? \"text\",\n        operator: getDefaultFilterOperator(\n          column.columnDef.meta?.variant ?? \"text\",\n        ),\n        filterId: generateId({ length: 8 }),\n      };\n\n      debouncedSetFilters([...filters, newFilter]);\n      setSelectedColumn(null);\n      setInputValue(\"\");\n      setOpen(false);\n    },\n    [filters, debouncedSetFilters],\n  );\n\n  const onFilterRemove = React.useCallback(\n    (filterId: string) => {\n      const updatedFilters = filters.filter(\n        (filter) => filter.filterId !== filterId,\n      );\n      debouncedSetFilters(updatedFilters);\n    },\n    [filters, debouncedSetFilters],\n  );\n\n  const onFilterUpdate = React.useCallback(\n    (\n      filterId: string,\n      updates: Partial<Omit<ExtendedColumnFilter<TData>, \"filterId\">>,\n    ) => {\n      debouncedSetFilters((prevFilters) => {\n        const updatedFilters = prevFilters.map((filter) => {\n          if (filter.filterId === filterId) {\n            return { ...filter, ...updates } as ExtendedColumnFilter<TData>;\n          }\n          return filter;\n        });\n        return updatedFilters;\n      });\n    },\n    [debouncedSetFilters],\n  );\n\n  const onFiltersReset = React.useCallback(() => {\n    debouncedSetFilters([]);\n  }, [debouncedSetFilters]);\n\n  return (\n    <div className=\"flex flex-wrap items-center gap-2\">\n      {filters.map((filter) => {\n        const column = columns.find((col) => col.id === filter.id);\n        if (!column) return null;\n\n        const filterItemId = `${id}-filter-${filter.filterId}`;\n        const operatorListboxId = `${filterItemId}-operator-listbox`;\n        const inputId = `${filterItemId}-input`;\n\n        return (\n          <div\n            key={filter.filterId}\n            role=\"listitem\"\n            id={filterItemId}\n            className=\"flex h-8 items-center rounded-md bg-background\"\n          >\n            <Popover>\n              <PopoverTrigger asChild>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"rounded-none rounded-l-md border border-r-0 font-normal dark:bg-input/30\"\n                >\n                  {column.columnDef.meta?.icon && (\n                    <column.columnDef.meta.icon className=\"text-muted-foreground\" />\n                  )}\n                  {column.columnDef.meta?.label ?? column.id}\n                </Button>\n              </PopoverTrigger>\n              <PopoverContent\n                align=\"start\"\n                className=\"w-48 origin-[var(--radix-popover-content-transform-origin)] p-0\"\n              >\n                <Command>\n                  <CommandInput placeholder=\"Search fields...\" />\n                  <CommandList>\n                    <CommandEmpty>No fields found.</CommandEmpty>\n                    <CommandGroup>\n                      {columns.map((col) => (\n                        <CommandItem\n                          key={col.id}\n                          value={col.id}\n                          onSelect={() => {\n                            onFilterUpdate(filter.filterId, {\n                              id: col.id as Extract<keyof TData, string>,\n                              variant: col.columnDef.meta?.variant ?? \"text\",\n                              operator: getDefaultFilterOperator(\n                                col.columnDef.meta?.variant ?? \"text\",\n                              ),\n                              value: \"\",\n                            });\n                          }}\n                        >\n                          {col.columnDef.meta?.icon && (\n                            <col.columnDef.meta.icon />\n                          )}\n                          <span className=\"truncate\">\n                            {col.columnDef.meta?.label ?? col.id}\n                          </span>\n                          <Check\n                            className={cn(\n                              \"ml-auto\",\n                              col.id === filter.id\n                                ? \"opacity-100\"\n                                : \"opacity-0\",\n                            )}\n                          />\n                        </CommandItem>\n                      ))}\n                    </CommandGroup>\n                  </CommandList>\n                </Command>\n              </PopoverContent>\n            </Popover>\n            <Select\n              value={filter.operator}\n              onValueChange={(value: FilterOperator) =>\n                onFilterUpdate(filter.filterId, {\n                  operator: value,\n                  value:\n                    value === \"isEmpty\" || value === \"isNotEmpty\"\n                      ? \"\"\n                      : filter.value,\n                })\n              }\n            >\n              <SelectTrigger\n                aria-controls={operatorListboxId}\n                className=\"h-8 rounded-none border-r-0 px-2.5 lowercase [&[data-size]]:h-8 [&_svg]:hidden\"\n              >\n                <SelectValue placeholder={filter.operator} />\n              </SelectTrigger>\n              <SelectContent\n                id={operatorListboxId}\n                className=\"origin-[var(--radix-select-content-transform-origin)]\"\n              >\n                {getFilterOperators(filter.variant).map((operator) => (\n                  <SelectItem\n                    key={operator.value}\n                    value={operator.value}\n                    className=\"lowercase\"\n                  >\n                    {operator.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            {onFilterInputRender({\n              filter,\n              column,\n              inputId,\n              onFilterUpdate,\n            })}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              aria-label={`Remove ${column.columnDef.meta?.label ?? column.id} filter`}\n              className=\"h-full rounded-none rounded-r-md border border-l-0 px-1.5 font-normal dark:bg-input/30\"\n              onClick={() => onFilterRemove(filter.filterId)}\n            >\n              <X className=\"size-3.5\" />\n            </Button>\n          </div>\n        );\n      })}\n      {filters.length > 0 && (\n        <Button\n          aria-label=\"Reset all filters\"\n          variant=\"outline\"\n          size=\"icon\"\n          className=\"size-8\"\n          onClick={onFiltersReset}\n        >\n          <X />\n        </Button>\n      )}\n      <Popover\n        open={open}\n        onOpenChange={async (open) => {\n          setOpen(open);\n\n          if (!open) {\n            await new Promise((resolve) => setTimeout(resolve, 100));\n            setSelectedColumn(null);\n            setInputValue(\"\");\n          }\n        }}\n      >\n        <PopoverTrigger asChild>\n          <Button\n            aria-label=\"Open filter command menu\"\n            variant=\"outline\"\n            size={filters.length > 0 ? \"icon\" : \"sm\"}\n            className=\"h-8\"\n          >\n            <ListFilter />\n            {filters.length > 0 ? null : \"Filter\"}\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent\n          align=\"start\"\n          className=\"w-auto origin-[var(--radix-popover-content-transform-origin)] p-0\"\n        >\n          <Command className=\"[&_[cmdk-input-wrapper]_svg]:hidden\">\n            <CommandInput\n              ref={inputRef}\n              placeholder={\n                selectedColumn\n                  ? (selectedColumn.columnDef.meta?.label ?? selectedColumn.id)\n                  : \"Search fields...\"\n              }\n              value={inputValue}\n              onValueChange={setInputValue}\n              onKeyDown={onInputKeyDown}\n            />\n            <CommandList>\n              {selectedColumn ? (\n                <>\n                  {selectedColumn.columnDef.meta?.options && (\n                    <CommandEmpty>No options found.</CommandEmpty>\n                  )}\n                  <FilterValueSelector\n                    column={selectedColumn}\n                    value={inputValue}\n                    onSelect={(value) => onFilterAdd(selectedColumn, value)}\n                  />\n                </>\n              ) : (\n                <>\n                  <CommandEmpty>No fields found.</CommandEmpty>\n                  <CommandGroup>\n                    {columns.map((column) => (\n                      <CommandItem\n                        key={column.id}\n                        value={column.id}\n                        onSelect={() => {\n                          setSelectedColumn(column);\n                          setInputValue(\"\");\n                          requestAnimationFrame(() => {\n                            inputRef.current?.focus();\n                          });\n                        }}\n                      >\n                        {column.columnDef.meta?.icon && (\n                          <column.columnDef.meta.icon />\n                        )}\n                        <span className=\"truncate\">\n                          {column.columnDef.meta?.label ?? column.id}\n                        </span>\n                      </CommandItem>\n                    ))}\n                  </CommandGroup>\n                </>\n              )}\n            </CommandList>\n          </Command>\n        </PopoverContent>\n      </Popover>\n    </div>\n  );\n}\n\ninterface FilterValueSelectorProps<TData> {\n  column: Column<TData>;\n  value: string;\n  onSelect: (value: string) => void;\n}\n\nfunction FilterValueSelector<TData>({\n  column,\n  value,\n  onSelect,\n}: FilterValueSelectorProps<TData>) {\n  const variant = column.columnDef.meta?.variant ?? \"text\";\n\n  switch (variant) {\n    case \"boolean\":\n      return (\n        <CommandGroup>\n          <CommandItem value=\"true\" onSelect={() => onSelect(\"true\")}>\n            True\n          </CommandItem>\n          <CommandItem value=\"false\" onSelect={() => onSelect(\"false\")}>\n            False\n          </CommandItem>\n        </CommandGroup>\n      );\n\n    case \"select\":\n    case \"multi-select\":\n      return (\n        <CommandGroup>\n          {column.columnDef.meta?.options?.map((option) => (\n            <CommandItem\n              key={option.value}\n              value={option.value}\n              onSelect={() => onSelect(option.value)}\n            >\n              {option.icon && <option.icon />}\n              <span className=\"truncate\">{option.label}</span>\n              {option.count && (\n                <span className=\"ml-auto font-mono text-xs\">\n                  {option.count}\n                </span>\n              )}\n            </CommandItem>\n          ))}\n        </CommandGroup>\n      );\n\n    case \"date\":\n    case \"date-range\":\n      return (\n        <Calendar\n          initialFocus\n          mode=\"single\"\n          selected={value ? new Date(value) : undefined}\n          onSelect={(date) => onSelect(date?.getTime().toString() ?? \"\")}\n        />\n      );\n\n    default: {\n      const isEmpty = !value.trim();\n\n      return (\n        <CommandGroup>\n          <CommandItem\n            value={value}\n            onSelect={() => onSelect(value)}\n            disabled={isEmpty}\n          >\n            {isEmpty ? (\n              <>\n                <Text />\n                <span>Type to add filter...</span>\n              </>\n            ) : (\n              <>\n                <BadgeCheck />\n                <span className=\"truncate\">Filter by &quot;{value}&quot;</span>\n              </>\n            )}\n          </CommandItem>\n        </CommandGroup>\n      );\n    }\n  }\n}\n\nfunction onFilterInputRender<TData>({\n  filter,\n  column,\n  inputId,\n  onFilterUpdate,\n}: {\n  filter: ExtendedColumnFilter<TData>;\n  column: Column<TData>;\n  inputId: string;\n  onFilterUpdate: (\n    filterId: string,\n    updates: Partial<Omit<ExtendedColumnFilter<TData>, \"filterId\">>,\n  ) => void;\n}) {\n  if (filter.operator === \"isEmpty\" || filter.operator === \"isNotEmpty\") {\n    return null;\n  }\n\n  switch (filter.variant) {\n    case \"text\":\n    case \"number\":\n    case \"range\": {\n      if (\n        (filter.variant === \"range\" && filter.operator === \"isBetween\") ||\n        filter.operator === \"isBetween\"\n      ) {\n        return (\n          <DataTableRangeFilter\n            filter={filter}\n            column={column}\n            inputId={inputId}\n            onFilterUpdate={onFilterUpdate}\n            className=\"size-full max-w-28 gap-0 [&_[data-slot='range-min']]:border-r-0 [&_input]:rounded-none [&_input]:px-1.5\"\n          />\n        );\n      }\n\n      const isNumber =\n        filter.variant === \"number\" || filter.variant === \"range\";\n\n      return (\n        <Input\n          id={inputId}\n          type={isNumber ? \"number\" : \"text\"}\n          inputMode={isNumber ? \"numeric\" : undefined}\n          placeholder={column.columnDef.meta?.placeholder ?? \"Enter value...\"}\n          className=\"h-full w-24 rounded-none px-1.5\"\n          defaultValue={typeof filter.value === \"string\" ? filter.value : \"\"}\n          onChange={(event) =>\n            onFilterUpdate(filter.filterId, { value: event.target.value })\n          }\n        />\n      );\n    }\n\n    case \"boolean\":\n      return (\n        <Select\n          value={typeof filter.value === \"string\" ? filter.value : \"true\"}\n          onValueChange={(value: \"true\" | \"false\") =>\n            onFilterUpdate(filter.filterId, { value })\n          }\n        >\n          <SelectTrigger\n            id={inputId}\n            className=\"rounded-none bg-transparent px-1.5 py-0.5 [&_svg]:hidden\"\n          >\n            <SelectValue placeholder={filter.value ? \"True\" : \"False\"} />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"true\">True</SelectItem>\n            <SelectItem value=\"false\">False</SelectItem>\n          </SelectContent>\n        </Select>\n      );\n\n    case \"select\":\n    case \"multi-select\": {\n      const options = column.columnDef.meta?.options ?? [];\n      const selectedValues = Array.isArray(filter.value)\n        ? filter.value\n        : [filter.value];\n\n      const selectedOptions = options.filter((option) =>\n        selectedValues.includes(option.value),\n      );\n\n      return (\n        <Popover>\n          <PopoverTrigger asChild>\n            <Button\n              id={inputId}\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"h-full min-w-16 rounded-none border px-1.5 font-normal dark:bg-input/30\"\n            >\n              {selectedOptions.length === 0 ? (\n                filter.variant === \"multi-select\" ? (\n                  \"Select options...\"\n                ) : (\n                  \"Select option...\"\n                )\n              ) : (\n                <>\n                  <div className=\"-space-x-2 flex items-center rtl:space-x-reverse\">\n                    {selectedOptions.map((selectedOption) =>\n                      selectedOption.icon ? (\n                        <div\n                          key={selectedOption.value}\n                          className=\"rounded-full border bg-background p-0.5\"\n                        >\n                          <selectedOption.icon className=\"size-3.5\" />\n                        </div>\n                      ) : null,\n                    )}\n                  </div>\n                  <span className=\"truncate\">\n                    {selectedOptions.length > 1\n                      ? `${selectedOptions.length} selected`\n                      : selectedOptions[0]?.label}\n                  </span>\n                </>\n              )}\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent\n            align=\"start\"\n            className=\"w-48 origin-[var(--radix-popover-content-transform-origin)] p-0\"\n          >\n            <Command>\n              <CommandInput placeholder=\"Search options...\" />\n              <CommandList>\n                <CommandEmpty>No options found.</CommandEmpty>\n                <CommandGroup>\n                  {options.map((option) => (\n                    <CommandItem\n                      key={option.value}\n                      value={option.value}\n                      onSelect={() => {\n                        const value =\n                          filter.variant === \"multi-select\"\n                            ? selectedValues.includes(option.value)\n                              ? selectedValues.filter((v) => v !== option.value)\n                              : [...selectedValues, option.value]\n                            : option.value;\n                        onFilterUpdate(filter.filterId, { value });\n                      }}\n                    >\n                      {option.icon && <option.icon />}\n                      <span className=\"truncate\">{option.label}</span>\n                      {filter.variant === \"multi-select\" && (\n                        <Check\n                          className={cn(\n                            \"ml-auto\",\n                            selectedValues.includes(option.value)\n                              ? \"opacity-100\"\n                              : \"opacity-0\",\n                          )}\n                        />\n                      )}\n                    </CommandItem>\n                  ))}\n                </CommandGroup>\n              </CommandList>\n            </Command>\n          </PopoverContent>\n        </Popover>\n      );\n    }\n\n    case \"date\":\n    case \"date-range\": {\n      const dateValue = Array.isArray(filter.value)\n        ? filter.value.filter(Boolean)\n        : [filter.value, filter.value].filter(Boolean);\n\n      const displayValue =\n        filter.operator === \"isBetween\" && dateValue.length === 2\n          ? `${formatDate(new Date(Number(dateValue[0])))} - ${formatDate(\n              new Date(Number(dateValue[1])),\n            )}`\n          : dateValue[0]\n            ? formatDate(new Date(Number(dateValue[0])))\n            : \"Pick date...\";\n\n      return (\n        <Popover>\n          <PopoverTrigger asChild>\n            <Button\n              id={inputId}\n              variant=\"ghost\"\n              size=\"sm\"\n              className={cn(\n                \"h-full rounded-none border px-1.5 font-normal dark:bg-input/30\",\n                !filter.value && \"text-muted-foreground\",\n              )}\n            >\n              <CalendarIcon className=\"size-3.5\" />\n              <span className=\"truncate\">{displayValue}</span>\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent\n            align=\"start\"\n            className=\"w-auto origin-[var(--radix-popover-content-transform-origin)] p-0\"\n          >\n            {filter.operator === \"isBetween\" ? (\n              <Calendar\n                mode=\"range\"\n                initialFocus\n                selected={\n                  dateValue.length === 2\n                    ? {\n                        from: new Date(Number(dateValue[0])),\n                        to: new Date(Number(dateValue[1])),\n                      }\n                    : {\n                        from: new Date(),\n                        to: new Date(),\n                      }\n                }\n                onSelect={(date) => {\n                  onFilterUpdate(filter.filterId, {\n                    value: date\n                      ? [\n                          (date.from?.getTime() ?? \"\").toString(),\n                          (date.to?.getTime() ?? \"\").toString(),\n                        ]\n                      : [],\n                  });\n                }}\n              />\n            ) : (\n              <Calendar\n                mode=\"single\"\n                initialFocus\n                selected={\n                  dateValue[0] ? new Date(Number(dateValue[0])) : undefined\n                }\n                onSelect={(date) => {\n                  onFilterUpdate(filter.filterId, {\n                    value: (date?.getTime() ?? \"\").toString(),\n                  });\n                }}\n              />\n            )}\n          </PopoverContent>\n        </Popover>\n      );\n    }\n\n    default:\n      return null;\n  }\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/new-york/components/data-table/data-table-range-filter.tsx",
      "content": "\"use client\";\n\nimport type { Column } from \"@tanstack/react-table\";\nimport * as React from \"react\";\n\nimport { Input } from \"@/components/ui/input\";\nimport { cn } from \"@/lib/utils\";\nimport type { ExtendedColumnFilter } from \"@/registry/new-york/types/data-table\";\n\ninterface DataTableRangeFilterProps<TData> extends React.ComponentProps<\"div\"> {\n  filter: ExtendedColumnFilter<TData>;\n  column: Column<TData>;\n  inputId: string;\n  onFilterUpdate: (\n    filterId: string,\n    updates: Partial<Omit<ExtendedColumnFilter<TData>, \"filterId\">>,\n  ) => void;\n}\n\nexport function DataTableRangeFilter<TData>({\n  filter,\n  column,\n  inputId,\n  onFilterUpdate,\n  className,\n  ...props\n}: DataTableRangeFilterProps<TData>) {\n  const meta = column.columnDef.meta;\n\n  const [min, max] = React.useMemo(() => {\n    const range = column.columnDef.meta?.range;\n    if (range) return range;\n\n    const values = column.getFacetedMinMaxValues();\n    if (!values) return [0, 100];\n\n    return [values[0], values[1]];\n  }, [column]);\n\n  const formatValue = React.useCallback(\n    (value: string | number | undefined) => {\n      if (value === undefined || value === \"\") return \"\";\n      const numValue = Number(value);\n      return Number.isNaN(numValue)\n        ? \"\"\n        : numValue.toLocaleString(undefined, {\n            maximumFractionDigits: 0,\n          });\n    },\n    [],\n  );\n\n  const value = React.useMemo(() => {\n    if (Array.isArray(filter.value)) return filter.value.map(formatValue);\n    return [formatValue(filter.value), \"\"];\n  }, [filter.value, formatValue]);\n\n  const onRangeValueChange = React.useCallback(\n    (value: string, isMin?: boolean) => {\n      const numValue = Number(value);\n      const currentValues = Array.isArray(filter.value)\n        ? filter.value\n        : [\"\", \"\"];\n      const otherValue = isMin\n        ? (currentValues[1] ?? \"\")\n        : (currentValues[0] ?? \"\");\n\n      if (\n        value === \"\" ||\n        (!Number.isNaN(numValue) &&\n          (isMin\n            ? numValue >= min && numValue <= (Number(otherValue) || max)\n            : numValue <= max && numValue >= (Number(otherValue) || min)))\n      ) {\n        onFilterUpdate(filter.filterId, {\n          value: isMin ? [value, otherValue] : [otherValue, value],\n        });\n      }\n    },\n    [filter.filterId, filter.value, min, max, onFilterUpdate],\n  );\n\n  return (\n    <div\n      data-slot=\"range\"\n      className={cn(\"flex w-full items-center gap-2\", className)}\n      {...props}\n    >\n      <Input\n        id={`${inputId}-min`}\n        type=\"number\"\n        aria-label={`${meta?.label} minimum value`}\n        aria-valuemin={min}\n        aria-valuemax={max}\n        data-slot=\"range-min\"\n        inputMode=\"numeric\"\n        placeholder={min.toString()}\n        min={min}\n        max={max}\n        className=\"h-8 w-full rounded\"\n        defaultValue={value[0]}\n        onChange={(event) => onRangeValueChange(event.target.value, true)}\n      />\n      <span className=\"sr-only shrink-0 text-muted-foreground\">to</span>\n      <Input\n        id={`${inputId}-max`}\n        type=\"number\"\n        aria-label={`${meta?.label} maximum value`}\n        aria-valuemin={min}\n        aria-valuemax={max}\n        data-slot=\"range-max\"\n        inputMode=\"numeric\"\n        placeholder={max.toString()}\n        min={min}\n        max={max}\n        className=\"h-8 w-full rounded\"\n        defaultValue={value[1]}\n        onChange={(event) => onRangeValueChange(event.target.value)}\n      />\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/new-york/components/data-table/data-table-action-bar.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport type { Table } from \"@tanstack/react-table\";\nimport { Loader } from \"lucide-react\";\nimport { AnimatePresence, motion } from \"motion/react\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\ninterface DataTableActionBarProps<TData>\n  extends React.ComponentProps<typeof motion.div> {\n  table: Table<TData>;\n  visible?: boolean;\n  container?: Element | DocumentFragment | null;\n  children: React.ReactNode;\n}\n\nfunction DataTableActionBar<TData>({\n  table,\n  visible: visibleProp,\n  container: containerProp,\n  children,\n  className,\n  ...props\n}: DataTableActionBarProps<TData>) {\n  const [mounted, setMounted] = React.useState(false);\n\n  React.useLayoutEffect(() => {\n    setMounted(true);\n  }, []);\n\n  React.useEffect(() => {\n    function onKeyDown(event: KeyboardEvent) {\n      if (event.key === \"Escape\") {\n        table.toggleAllRowsSelected(false);\n      }\n    }\n\n    window.addEventListener(\"keydown\", onKeyDown);\n    return () => window.removeEventListener(\"keydown\", onKeyDown);\n  }, [table]);\n\n  const container =\n    containerProp ?? (mounted ? globalThis.document?.body : null);\n\n  if (!container) return null;\n\n  const visible =\n    visibleProp ?? table.getFilteredSelectedRowModel().rows.length > 0;\n\n  return ReactDOM.createPortal(\n    <AnimatePresence>\n      {visible && (\n        <motion.div\n          role=\"toolbar\"\n          aria-orientation=\"horizontal\"\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          exit={{ opacity: 0, y: 20 }}\n          transition={{ duration: 0.2, ease: \"easeInOut\" }}\n          className={cn(\n            \"fixed inset-x-0 bottom-6 z-50 mx-auto flex w-fit flex-wrap items-center justify-center gap-2 rounded-md border bg-background p-2 text-foreground shadow-sm\",\n            className,\n          )}\n          {...props}\n        >\n          {children}\n        </motion.div>\n      )}\n    </AnimatePresence>,\n    container,\n  );\n}\n\ninterface DataTableActionBarActionProps\n  extends React.ComponentProps<typeof Button> {\n  tooltip?: string;\n  isPending?: boolean;\n}\n\nfunction DataTableActionBarAction({\n  size = \"sm\",\n  tooltip,\n  isPending,\n  disabled,\n  className,\n  children,\n  ...props\n}: DataTableActionBarActionProps) {\n  const trigger = (\n    <Button\n      variant=\"secondary\"\n      size={size}\n      className={cn(\n        \"gap-1.5 border border-secondary bg-secondary/50 hover:bg-secondary/70 [&>svg]:size-3.5\",\n        size === \"icon\" ? \"size-7\" : \"h-7\",\n        className,\n      )}\n      disabled={disabled || isPending}\n      {...props}\n    >\n      {isPending ? <Loader className=\"animate-spin\" /> : children}\n    </Button>\n  );\n\n  if (!tooltip) return trigger;\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{trigger}</TooltipTrigger>\n      <TooltipContent\n        sideOffset={6}\n        className=\"border bg-accent font-semibold text-foreground dark:bg-zinc-900 [&>span]:hidden\"\n      >\n        <p>{tooltip}</p>\n      </TooltipContent>\n    </Tooltip>\n  );\n}\n\nexport { DataTableActionBar, DataTableActionBarAction };\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/new-york/components/data-table/data-table-toolbar.tsx",
      "content": "\"use client\";\n\nimport type { Column, Table } from \"@tanstack/react-table\";\nimport { X } from \"lucide-react\";\nimport * as React from \"react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { cn } from \"@/lib/utils\";\nimport { DataTableDatePicker } from \"@/registry/new-york/components/data-table/data-table-date-picker\";\nimport { DataTableFacetedFilter } from \"@/registry/new-york/components/data-table/data-table-faceted-filter\";\nimport { DataTableSlider } from \"@/registry/new-york/components/data-table/data-table-slider\";\nimport { DataTableViewOptions } from \"@/registry/new-york/components/data-table/data-table-view-options\";\n\ninterface DataTableToolbarProps<TData>\n  extends React.HTMLAttributes<HTMLDivElement> {\n  table: Table<TData>;\n}\n\nexport function DataTableToolbar<TData>({\n  table,\n  children,\n  className,\n  ...props\n}: DataTableToolbarProps<TData>) {\n  const isFiltered = table.getState().columnFilters.length > 0;\n\n  const columns = React.useMemo(\n    () => table.getAllColumns().filter((column) => column.getCanFilter()),\n    [table],\n  );\n\n  const onReset = React.useCallback(() => {\n    table.resetColumnFilters();\n  }, [table]);\n\n  return (\n    <div\n      role=\"toolbar\"\n      aria-orientation=\"horizontal\"\n      className={cn(\n        \"flex w-full items-start justify-between gap-2 p-1\",\n        className,\n      )}\n      {...props}\n    >\n      <div className=\"flex flex-1 flex-wrap items-center gap-2\">\n        {columns.map((column) => (\n          <DataTableToolbarFilter key={column.id} column={column} />\n        ))}\n        {isFiltered && (\n          <Button\n            aria-label=\"Reset filters\"\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"border-dashed\"\n            onClick={onReset}\n          >\n            <X />\n            Reset\n          </Button>\n        )}\n      </div>\n      <div className=\"flex items-center gap-2\">\n        {children}\n        <DataTableViewOptions table={table} />\n      </div>\n    </div>\n  );\n}\ninterface DataTableToolbarFilterProps<TData> {\n  column: Column<TData>;\n}\n\nfunction DataTableToolbarFilter<TData>({\n  column,\n}: DataTableToolbarFilterProps<TData>) {\n  {\n    const columnMeta = column.columnDef.meta;\n\n    const onFilterRender = React.useCallback(() => {\n      if (!columnMeta?.variant) return null;\n\n      switch (columnMeta.variant) {\n        case \"text\":\n        case \"number\":\n          return (\n            <Input\n              type={columnMeta.variant}\n              placeholder={columnMeta.placeholder ?? columnMeta.label}\n              value={(column.getFilterValue() as string) ?? \"\"}\n              onChange={(event) => column.setFilterValue(event.target.value)}\n              className=\"h-8 w-40 lg:w-56\"\n            />\n          );\n\n        case \"date\":\n        case \"date-range\":\n          return (\n            <DataTableDatePicker\n              column={column}\n              title={columnMeta.label ?? column.id}\n              multiple={columnMeta.variant === \"date-range\"}\n            />\n          );\n\n        case \"range\":\n          return (\n            <DataTableSlider\n              column={column}\n              title={columnMeta.label ?? column.id}\n            />\n          );\n\n        case \"select\":\n        case \"multi-select\":\n          return (\n            <DataTableFacetedFilter\n              column={column}\n              title={columnMeta.label ?? column.id}\n              options={columnMeta.options ?? []}\n              multiple={columnMeta.variant === \"multi-select\"}\n            />\n          );\n\n        default:\n          return null;\n      }\n    }, [column, columnMeta]);\n\n    return onFilterRender();\n  }\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/new-york/components/data-table/data-table-advanced-toolbar.tsx",
      "content": "\"use client\";\n\nimport type { Table } from \"@tanstack/react-table\";\nimport type * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { DataTableViewOptions } from \"@/registry/new-york/components/data-table/data-table-view-options\";\n\ninterface DataTableAdvancedToolbarProps<TData>\n  extends React.HTMLAttributes<HTMLDivElement> {\n  table: Table<TData>;\n}\n\nexport function DataTableAdvancedToolbar<TData>({\n  table,\n  children,\n  className,\n  ...props\n}: DataTableAdvancedToolbarProps<TData>) {\n  return (\n    <div\n      role=\"toolbar\"\n      aria-orientation=\"horizontal\"\n      className={cn(\n        \"flex w-full items-start justify-between gap-2 p-1\",\n        className,\n      )}\n      {...props}\n    >\n      <div className=\"flex flex-1 flex-wrap items-center gap-2\">{children}</div>\n      <div className=\"flex items-center gap-2\">\n        <DataTableViewOptions table={table} />\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/new-york/components/data-table/data-table-sort-list.tsx",
      "content": "\"use client\";\n\nimport type { ColumnSort, SortDirection, Table } from \"@tanstack/react-table\";\nimport {\n  ArrowDownUp,\n  ChevronsUpDown,\n  GripVertical,\n  Trash2,\n} from \"lucide-react\";\nimport * as React from \"react\";\n\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Sortable,\n  SortableContent,\n  SortableItem,\n  SortableItemHandle,\n  SortableOverlay,\n} from \"@/components/ui/sortable\";\nimport { dataTableConfig } from \"@/config/data-table\";\nimport { cn } from \"@/lib/utils\";\nimport type { PopoverContentProps } from \"@radix-ui/react-popover\";\n\ninterface DataTableSortListProps<TData>\n  extends Pick<\n    PopoverContentProps,\n    \"align\" | \"alignOffset\" | \"collisionPadding\" | \"side\" | \"sideOffset\"\n  > {\n  table: Table<TData>;\n}\n\nexport function DataTableSortList<TData>({\n  table,\n  align = \"center\",\n  side = \"bottom\",\n  alignOffset = 0,\n  sideOffset = 4,\n  collisionPadding = 16,\n}: DataTableSortListProps<TData>) {\n  const id = React.useId();\n  const labelId = React.useId();\n  const descriptionId = React.useId();\n\n  const sorting = table.getState().sorting;\n  const onSortingChange = table.setSorting;\n\n  const { columnLabels, columns } = React.useMemo(() => {\n    const labels = new Map<string, string>();\n    const sortingIds = new Set(sorting.map((s) => s.id));\n    const availableColumns: { id: string; label: string }[] = [];\n\n    for (const column of table.getAllColumns()) {\n      if (!column.getCanSort()) continue;\n\n      const label = column.columnDef.meta?.label ?? column.id;\n      labels.set(column.id, label);\n\n      if (!sortingIds.has(column.id)) {\n        availableColumns.push({ id: column.id, label });\n      }\n    }\n\n    return {\n      columnLabels: labels,\n      columns: availableColumns,\n    };\n  }, [sorting, table]);\n\n  const onSortAdd = React.useCallback(() => {\n    const firstColumn = columns[0];\n    if (!firstColumn) return;\n\n    onSortingChange((prevSorting) => [\n      ...prevSorting,\n      { id: firstColumn.id, desc: false },\n    ]);\n  }, [columns, onSortingChange]);\n\n  const onSortUpdate = React.useCallback(\n    (sortId: string, updates: Partial<ColumnSort>) => {\n      onSortingChange((prevSorting) => {\n        if (!prevSorting) return prevSorting;\n        return prevSorting.map((sort) =>\n          sort.id === sortId ? { ...sort, ...updates } : sort,\n        );\n      });\n    },\n    [onSortingChange],\n  );\n\n  const onSortRemove = React.useCallback(\n    (sortId: string) => {\n      onSortingChange((prevSorting) =>\n        prevSorting.filter((item) => item.id !== sortId),\n      );\n    },\n    [onSortingChange],\n  );\n\n  const onSortingReset = React.useCallback(\n    () => onSortingChange(table.initialState.sorting),\n    [onSortingChange, table.initialState.sorting],\n  );\n\n  return (\n    <Sortable\n      value={sorting}\n      onValueChange={onSortingChange}\n      getItemValue={(item) => item.id}\n    >\n      <Popover>\n        <PopoverTrigger asChild>\n          <Button variant=\"outline\" size=\"sm\">\n            <ArrowDownUp />\n            Sort\n            {sorting.length > 0 && (\n              <Badge\n                variant=\"secondary\"\n                className=\"h-[1.14rem] rounded-[0.2rem] px-[0.32rem] font-mono font-normal text-[0.65rem]\"\n              >\n                {sorting.length}\n              </Badge>\n            )}\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent\n          aria-labelledby={labelId}\n          aria-describedby={descriptionId}\n          align={align}\n          side={side}\n          alignOffset={alignOffset}\n          sideOffset={sideOffset}\n          collisionPadding={collisionPadding}\n          className=\"flex w-[calc(100vw-(--spacing(20)))] origin-[var(--radix-popover-content-transform-origin)] flex-col gap-3.5 p-4 sm:w-[var(--radix-popover-content-width)] sm:min-w-[25rem]\"\n        >\n          <div className=\"flex flex-col gap-1\">\n            <h4 id={labelId} className=\"font-medium leading-none\">\n              {sorting.length > 0 ? \"Sort by\" : \"No sorting applied\"}\n            </h4>\n            <p\n              id={descriptionId}\n              className={cn(\n                \"text-muted-foreground text-sm\",\n                sorting.length > 0 && \"sr-only\",\n              )}\n            >\n              {sorting.length > 0\n                ? \"Modify sorting to organize your results.\"\n                : \"Add sorting to organize your results.\"}\n            </p>\n          </div>\n          {sorting.length > 0 && (\n            <SortableContent asChild>\n              <div\n                role=\"list\"\n                className=\"flex max-h-[300px] flex-col gap-2 overflow-y-auto p-0.5\"\n              >\n                {sorting.map((sort) => (\n                  <SortItem\n                    key={sort.id}\n                    sort={sort}\n                    sortItemId={`${id}-sort-${sort.id}`}\n                    columns={columns}\n                    columnLabels={columnLabels}\n                    onSortUpdate={onSortUpdate}\n                    onSortRemove={onSortRemove}\n                  />\n                ))}\n              </div>\n            </SortableContent>\n          )}\n          <div className=\"flex w-full items-center gap-2\">\n            <Button\n              size=\"sm\"\n              className=\"rounded\"\n              onClick={onSortAdd}\n              disabled={columns.length === 0}\n            >\n              Add sort\n            </Button>\n            {sorting.length > 0 && (\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"rounded\"\n                onClick={onSortingReset}\n              >\n                Reset sorting\n              </Button>\n            )}\n          </div>\n        </PopoverContent>\n      </Popover>\n      <SortableOverlay>\n        <div className=\"flex items-center gap-2\">\n          <div className=\"h-8 w-[11.25rem] rounded-sm bg-primary/10\" />\n          <div className=\"h-8 w-24 rounded-sm bg-primary/10\" />\n          <div className=\"size-8 shrink-0 rounded-sm bg-primary/10\" />\n          <div className=\"size-8 shrink-0 rounded-sm bg-primary/10\" />\n        </div>\n      </SortableOverlay>\n    </Sortable>\n  );\n}\n\ninterface SortItemProps {\n  sort: ColumnSort;\n  sortItemId: string;\n  columns: { id: string; label: string }[];\n  columnLabels: Map<string, string>;\n  onSortUpdate: (sortId: string, updates: Partial<ColumnSort>) => void;\n  onSortRemove: (sortId: string) => void;\n}\n\nfunction SortItem({\n  sort,\n  sortItemId,\n  columns,\n  columnLabels,\n  onSortUpdate,\n  onSortRemove,\n}: SortItemProps) {\n  const fieldListboxId = `${sortItemId}-field-listbox`;\n  const fieldTriggerId = `${sortItemId}-field-trigger`;\n  const directionListboxId = `${sortItemId}-direction-listbox`;\n\n  return (\n    <SortableItem value={sort.id} asChild>\n      <div\n        role=\"listitem\"\n        id={sortItemId}\n        tabIndex={-1}\n        className=\"flex items-center gap-2\"\n      >\n        <Popover>\n          <PopoverTrigger asChild>\n            <Button\n              id={fieldTriggerId}\n              role=\"combobox\"\n              aria-controls={fieldListboxId}\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"w-44 justify-between rounded font-normal\"\n            >\n              <span className=\"truncate\">{columnLabels.get(sort.id)}</span>\n              <ChevronsUpDown className=\"opacity-50\" />\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent\n            id={fieldListboxId}\n            className=\"w-[var(--radix-popover-trigger-width)] origin-[var(--radix-popover-content-transform-origin)] p-0\"\n          >\n            <Command>\n              <CommandInput placeholder=\"Search fields...\" />\n              <CommandList>\n                <CommandEmpty>No fields found.</CommandEmpty>\n                <CommandGroup>\n                  {columns.map((column) => (\n                    <CommandItem\n                      key={column.id}\n                      value={column.id}\n                      onSelect={(value) => onSortUpdate(sort.id, { id: value })}\n                    >\n                      <span className=\"truncate\">{column.label}</span>\n                    </CommandItem>\n                  ))}\n                </CommandGroup>\n              </CommandList>\n            </Command>\n          </PopoverContent>\n        </Popover>\n        <Select\n          value={sort.desc ? \"desc\" : \"asc\"}\n          onValueChange={(value: SortDirection) =>\n            onSortUpdate(sort.id, { desc: value === \"desc\" })\n          }\n        >\n          <SelectTrigger\n            aria-controls={directionListboxId}\n            className=\"h-8 w-24 rounded [&[data-size]]:h-8\"\n          >\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent\n            id={directionListboxId}\n            className=\"min-w-[var(--radix-select-trigger-width)] origin-[var(--radix-select-content-transform-origin)]\"\n          >\n            {dataTableConfig.sortOrders.map((order) => (\n              <SelectItem key={order.value} value={order.value}>\n                {order.label}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n        <Button\n          aria-controls={sortItemId}\n          variant=\"outline\"\n          size=\"icon\"\n          className=\"size-8 shrink-0 rounded\"\n          onClick={() => onSortRemove(sort.id)}\n        >\n          <Trash2 />\n        </Button>\n        <SortableItemHandle asChild>\n          <Button\n            variant=\"outline\"\n            size=\"icon\"\n            className=\"size-8 shrink-0 rounded\"\n          >\n            <GripVertical />\n          </Button>\n        </SortableItemHandle>\n      </div>\n    </SortableItem>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/new-york/components/data-table/data-table-slider.tsx",
      "content": "\"use client\";\n\nimport type { Column } from \"@tanstack/react-table\";\nimport * as React from \"react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { PlusCircle, Settings2, XCircle } from \"lucide-react\";\n\ninterface DataTableSliderProps<TData> {\n  column: Column<TData, unknown>;\n  title?: string;\n}\n\nexport function DataTableSlider<TData>({\n  column,\n  title,\n}: DataTableSliderProps<TData>) {\n  const id = React.useId();\n  const columnFilterValue = column.getFilterValue() as\n    | [number, number]\n    | undefined;\n\n  const unit = column.columnDef.meta?.unit;\n\n  const [min, max] = React.useMemo(() => {\n    const range = column.columnDef.meta?.range;\n    if (range) return range;\n\n    const values = column.getFacetedMinMaxValues();\n    if (!values) return [0, 100];\n\n    return [values[0], values[1]];\n  }, [column]);\n\n  const [range, setRange] = React.useState<[number, number]>(\n    columnFilterValue ?? [min, max],\n  );\n\n  const onRangeChange = React.useCallback(\n    (values: [number, number]) => {\n      setRange(values);\n      column.setFilterValue(values);\n    },\n    [column],\n  );\n\n  const onReset = React.useCallback(\n    (event?: React.MouseEvent) => {\n      event?.stopPropagation();\n      setRange([min, max]);\n      column.setFilterValue(undefined);\n    },\n    [column, min, max],\n  );\n\n  const formatValue = React.useCallback((value: number) => {\n    return value.toLocaleString(undefined, {\n      maximumFractionDigits: 0,\n    });\n  }, []);\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button variant=\"outline\" size=\"sm\" className=\"border-dashed\">\n          {columnFilterValue ? (\n            <div\n              aria-label=\"Clear filter\"\n              role=\"button\"\n              tabIndex={0}\n              onClick={onReset}\n              className=\"rounded-sm opacity-70 transition-opacity hover:opacity-100 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring\"\n            >\n              <XCircle />\n            </div>\n          ) : (\n            <PlusCircle />\n          )}\n          <span>{title}</span>\n          {columnFilterValue ? (\n            <>\n              <Separator orientation=\"vertical\" className=\"mx-0.5 h-4\" />\n              {formatValue(columnFilterValue[0])} -{\" \"}\n              {formatValue(columnFilterValue[1])}\n              {unit ? ` ${unit}` : \"\"}\n            </>\n          ) : null}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent align=\"start\" className=\"flex w-auto flex-col gap-4\">\n        <div className=\"flex flex-col gap-3\">\n          <p className=\"font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n            {title}\n          </p>\n          <div className=\"flex items-center gap-4\">\n            <Label htmlFor={`${id}-from`} className=\"sr-only\">\n              From\n            </Label>\n            <div className=\"relative\">\n              <Input\n                id={`${id}-from`}\n                type=\"text\"\n                aria-valuemin={min}\n                aria-valuemax={max}\n                inputMode=\"numeric\"\n                pattern=\"[0-9]*\"\n                placeholder={min.toString()}\n                min={min}\n                max={max}\n                value={range[0].toString()}\n                onChange={(event) => {\n                  const numValue = Number(event.target.value);\n                  if (\n                    !Number.isNaN(numValue) &&\n                    numValue >= min &&\n                    numValue <= range[1]\n                  ) {\n                    onRangeChange([numValue, range[1]]);\n                  }\n                }}\n                className=\"h-8 w-24 pr-8\"\n              />\n              {unit && (\n                <span className=\"absolute top-0 right-0 bottom-0 flex items-center rounded-r-md bg-accent px-2 text-muted-foreground text-sm\">\n                  {unit}\n                </span>\n              )}\n            </div>\n            <Label htmlFor={`${id}-to`} className=\"sr-only\">\n              to\n            </Label>\n            <div className=\"relative\">\n              <Input\n                id={`${id}-to`}\n                type=\"text\"\n                aria-valuemin={min}\n                aria-valuemax={max}\n                inputMode=\"numeric\"\n                pattern=\"[0-9]*\"\n                placeholder={max.toString()}\n                min={min}\n                max={max}\n                value={range[1].toString()}\n                onChange={(event) => {\n                  const numValue = Number(event.target.value);\n                  if (\n                    !Number.isNaN(numValue) &&\n                    numValue <= max &&\n                    numValue >= range[0]\n                  ) {\n                    onRangeChange([range[0], numValue]);\n                  }\n                }}\n                className=\"h-8 w-24 pr-8\"\n              />\n              {unit && (\n                <span className=\"absolute top-0 right-0 bottom-0 flex items-center rounded-r-md bg-accent px-2 text-muted-foreground text-sm\">\n                  {unit}\n                </span>\n              )}\n            </div>\n          </div>\n          <Slider\n            aria-label=\"Select range\"\n            min={min}\n            max={max}\n            value={range}\n            onValueChange={(value) => onRangeChange(value as [number, number])}\n            className=\"[&_[role=slider]]:h-4 [&_[role=slider]]:w-4\"\n          />\n        </div>\n        <Button\n          aria-label=\"Reset range filter\"\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={onReset}\n          className=\"px-3 text-xs\"\n        >\n          Reset\n        </Button>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/new-york/components/data-table/data-table-date-picker.tsx",
      "content": "\"use client\";\n\nimport type { Column } from \"@tanstack/react-table\";\nimport { CalendarIcon, XCircle } from \"lucide-react\";\nimport * as React from \"react\";\nimport type { DateRange } from \"react-day-picker\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { formatDate } from \"@/registry/new-york/lib/format\";\n\ntype DateSelection = Date[] | DateRange;\n\nfunction isDateRange(value: DateSelection): value is DateRange {\n  return value && typeof value === \"object\" && !Array.isArray(value);\n}\n\nfunction validateDate(\n  timestamp: number | string | undefined,\n): Date | undefined {\n  if (!timestamp) return undefined;\n  const numericTimestamp =\n    typeof timestamp === \"string\" ? Number(timestamp) : timestamp;\n  const date = new Date(numericTimestamp);\n  return !Number.isNaN(date.getTime()) ? date : undefined;\n}\n\nfunction parseColumnFilterValue(\n  value: unknown,\n): (number | string | undefined)[] {\n  if (Array.isArray(value)) {\n    return value as (number | string)[];\n  }\n  if (typeof value === \"string\") {\n    return [value];\n  }\n  return [value as number | string | undefined];\n}\n\ninterface DataTableDatePickerProps<TData> {\n  column: Column<TData, unknown>;\n  title?: string;\n  multiple?: boolean;\n}\n\nexport function DataTableDatePicker<TData>({\n  column,\n  title,\n  multiple,\n}: DataTableDatePickerProps<TData>) {\n  const columnFilterValue = column.getFilterValue();\n\n  const selectedDates = React.useMemo<DateSelection>(() => {\n    if (!columnFilterValue) {\n      return multiple ? { from: undefined, to: undefined } : [];\n    }\n\n    if (multiple) {\n      const timestamps = parseColumnFilterValue(columnFilterValue);\n      return {\n        from: validateDate(timestamps[0]),\n        to: validateDate(timestamps[1]),\n      };\n    }\n\n    const timestamps = parseColumnFilterValue(columnFilterValue);\n    const date = validateDate(timestamps[0]);\n    return date ? [date] : [];\n  }, [columnFilterValue, multiple]);\n\n  const onSelect = React.useCallback(\n    (date: Date | DateRange | undefined) => {\n      if (!date) {\n        column.setFilterValue(undefined);\n        return;\n      }\n\n      if (multiple && !(\"getTime\" in date)) {\n        const from = date.from?.getTime();\n        const to = date.to?.getTime();\n        column.setFilterValue(from || to ? [from, to] : undefined);\n      } else if (!multiple && \"getTime\" in date) {\n        column.setFilterValue(date.getTime());\n      }\n    },\n    [column, multiple],\n  );\n\n  const onReset = React.useCallback(\n    (event: React.MouseEvent) => {\n      event.stopPropagation();\n      column.setFilterValue(undefined);\n    },\n    [column],\n  );\n\n  const hasValue = React.useMemo(() => {\n    if (multiple) {\n      if (!isDateRange(selectedDates)) return false;\n      return selectedDates.from || selectedDates.to;\n    }\n    if (!Array.isArray(selectedDates)) return false;\n    return selectedDates.length > 0;\n  }, [multiple, selectedDates]);\n\n  const formatDateRange = React.useCallback((range: DateRange) => {\n    if (!range.from && !range.to) return \"\";\n    if (range.from && range.to) {\n      return `${formatDate(range.from)} - ${formatDate(range.to)}`;\n    }\n    return formatDate(range.from ?? range.to);\n  }, []);\n\n  const label = React.useMemo(() => {\n    if (multiple) {\n      if (!isDateRange(selectedDates)) return null;\n\n      const hasSelectedDates = selectedDates.from || selectedDates.to;\n      const dateText = hasSelectedDates\n        ? formatDateRange(selectedDates)\n        : \"Select date range\";\n\n      return (\n        <span className=\"flex items-center gap-2\">\n          <span>{title}</span>\n          {hasSelectedDates && (\n            <>\n              <Separator orientation=\"vertical\" className=\"mx-0.5 h-4\" />\n              <span>{dateText}</span>\n            </>\n          )}\n        </span>\n      );\n    }\n\n    if (isDateRange(selectedDates)) return null;\n\n    const hasSelectedDate = selectedDates.length > 0;\n    const dateText = hasSelectedDate\n      ? formatDate(selectedDates[0])\n      : \"Select date\";\n\n    return (\n      <span className=\"flex items-center gap-2\">\n        <span>{title}</span>\n        {hasSelectedDate && (\n          <>\n            <Separator orientation=\"vertical\" className=\"mx-0.5 h-4\" />\n            <span>{dateText}</span>\n          </>\n        )}\n      </span>\n    );\n  }, [selectedDates, multiple, formatDateRange, title]);\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button variant=\"outline\" size=\"sm\" className=\"border-dashed\">\n          {hasValue ? (\n            <div\n              aria-label={`Clear ${title} filter`}\n              role=\"button\"\n              tabIndex={0}\n              onClick={onReset}\n              className=\"rounded-sm opacity-70 transition-opacity hover:opacity-100 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring\"\n            >\n              <XCircle />\n            </div>\n          ) : (\n            <CalendarIcon />\n          )}\n          {label}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-auto p-0\" align=\"start\">\n        {multiple ? (\n          <Calendar\n            initialFocus\n            mode=\"range\"\n            selected={\n              isDateRange(selectedDates)\n                ? selectedDates\n                : { from: undefined, to: undefined }\n            }\n            onSelect={onSelect}\n          />\n        ) : (\n          <Calendar\n            initialFocus\n            mode=\"single\"\n            selected={\n              !isDateRange(selectedDates) ? selectedDates[0] : undefined\n            }\n            onSelect={onSelect}\n          />\n        )}\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/new-york/components/data-table/data-table-skeleton.tsx",
      "content": "import { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { cn } from \"@/lib/utils\";\n\ninterface DataTableSkeletonProps extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * The number of columns in the table.\n   * @type number\n   */\n  columnCount: number;\n\n  /**\n   * The number of rows in the table.\n   * @default 10\n   * @type number | undefined\n   */\n  rowCount?: number;\n\n  /**\n   * The number of searchable columns in the table.\n   * @default 0\n   * @type number | undefined\n   */\n  searchableColumnCount?: number;\n\n  /**\n   * The number of filterable columns in the table.\n   * @default 0\n   * @type number | undefined\n   */\n  filterableColumnCount?: number;\n\n  /**\n   * Flag to show the table view options.\n   * @default undefined\n   * @type boolean | undefined\n   */\n  showViewOptions?: boolean;\n\n  /**\n   * The width of each cell in the table.\n   * The length of the array should be equal to the columnCount.\n   * Any valid CSS width value is accepted.\n   * @default [\"auto\"]\n   * @type string[] | undefined\n   */\n  cellWidths?: string[];\n\n  /**\n   * Flag to show the pagination bar.\n   * @default true\n   * @type boolean | undefined\n   */\n  withPagination?: boolean;\n\n  /**\n   * Flag to prevent the table cells from shrinking.\n   * @default false\n   * @type boolean | undefined\n   */\n  shrinkZero?: boolean;\n}\n\nexport function DataTableSkeleton(props: DataTableSkeletonProps) {\n  const {\n    columnCount,\n    rowCount = 10,\n    searchableColumnCount = 0,\n    filterableColumnCount = 0,\n    showViewOptions = true,\n    cellWidths = [\"auto\"],\n    withPagination = true,\n    shrinkZero = false,\n    className,\n    ...skeletonProps\n  } = props;\n\n  return (\n    <div\n      className={cn(\"w-full space-y-2.5 overflow-auto\", className)}\n      {...skeletonProps}\n    >\n      <div className=\"flex w-full items-center justify-between space-x-2 overflow-auto p-1\">\n        <div className=\"flex flex-1 items-center space-x-2\">\n          {searchableColumnCount > 0\n            ? Array.from({ length: searchableColumnCount }).map((_, i) => (\n                <Skeleton key={i} className=\"h-7 w-40 lg:w-60\" />\n              ))\n            : null}\n          {filterableColumnCount > 0\n            ? Array.from({ length: filterableColumnCount }).map((_, i) => (\n                <Skeleton key={i} className=\"h-7 w-[4.5rem] border-dashed\" />\n              ))\n            : null}\n        </div>\n        {showViewOptions ? (\n          <Skeleton className=\"ml-auto hidden h-7 w-[4.5rem] lg:flex\" />\n        ) : null}\n      </div>\n      <div className=\"rounded-md border\">\n        <Table>\n          <TableHeader>\n            {Array.from({ length: 1 }).map((_, i) => (\n              <TableRow key={i} className=\"hover:bg-transparent\">\n                {Array.from({ length: columnCount }).map((_, j) => (\n                  <TableHead\n                    key={j}\n                    style={{\n                      width: cellWidths[j],\n                      minWidth: shrinkZero ? cellWidths[j] : \"auto\",\n                    }}\n                  >\n                    <Skeleton className=\"h-6 w-full\" />\n                  </TableHead>\n                ))}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody>\n            {Array.from({ length: rowCount }).map((_, i) => (\n              <TableRow key={i} className=\"hover:bg-transparent\">\n                {Array.from({ length: columnCount }).map((_, j) => (\n                  <TableCell\n                    key={j}\n                    style={{\n                      width: cellWidths[j],\n                      minWidth: shrinkZero ? cellWidths[j] : \"auto\",\n                    }}\n                  >\n                    <Skeleton className=\"h-6 w-full\" />\n                  </TableCell>\n                ))}\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </div>\n      {withPagination ? (\n        <div className=\"flex w-full items-center justify-between gap-4 overflow-auto p-1 sm:gap-8\">\n          <Skeleton className=\"h-7 w-40 shrink-0\" />\n          <div className=\"flex items-center gap-4 sm:gap-6 lg:gap-8\">\n            <div className=\"flex items-center space-x-2\">\n              <Skeleton className=\"h-7 w-24\" />\n              <Skeleton className=\"h-7 w-[4.5rem]\" />\n            </div>\n            <div className=\"flex items-center justify-center font-medium text-sm\">\n              <Skeleton className=\"h-7 w-20\" />\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Skeleton className=\"hidden size-7 lg:block\" />\n              <Skeleton className=\"size-7\" />\n              <Skeleton className=\"size-7\" />\n              <Skeleton className=\"hidden size-7 lg:block\" />\n            </div>\n          </div>\n        </div>\n      ) : null}\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/new-york/hooks/use-data-table.ts",
      "content": "\"use client\";\n\nimport {\n  type ColumnFiltersState,\n  type PaginationState,\n  type RowSelectionState,\n  type SortingState,\n  type TableOptions,\n  type TableState,\n  type Updater,\n  type VisibilityState,\n  getCoreRowModel,\n  getFacetedMinMaxValues,\n  getFacetedRowModel,\n  getFacetedUniqueValues,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\";\nimport {\n  type Parser,\n  type UseQueryStateOptions,\n  parseAsArrayOf,\n  parseAsInteger,\n  parseAsString,\n  useQueryState,\n  useQueryStates,\n} from \"nuqs\";\nimport * as React from \"react\";\n\nimport { useDebouncedCallback } from \"@/registry/new-york/hooks/use-debounced-callback\";\nimport { getSortingStateParser } from \"@/registry/new-york/lib/parsers\";\nimport type { ExtendedColumnSort } from \"@/registry/new-york/types/data-table\";\n\nconst PAGE_KEY = \"page\";\nconst PER_PAGE_KEY = \"perPage\";\nconst SORT_KEY = \"sort\";\nconst ARRAY_SEPARATOR = \",\";\nconst DEBOUNCE_MS = 300;\nconst THROTTLE_MS = 50;\n\ninterface UseDataTableProps<TData>\n  extends Omit<\n      TableOptions<TData>,\n      | \"state\"\n      | \"pageCount\"\n      | \"getCoreRowModel\"\n      | \"manualFiltering\"\n      | \"manualPagination\"\n      | \"manualSorting\"\n    >,\n    Required<Pick<TableOptions<TData>, \"pageCount\">> {\n  initialState?: Omit<Partial<TableState>, \"sorting\"> & {\n    sorting?: ExtendedColumnSort<TData>[];\n  };\n  history?: \"push\" | \"replace\";\n  throttleMs?: number;\n  debounceMs?: number;\n  scroll?: boolean;\n  shallow?: boolean;\n  clearOnDefault?: boolean;\n  enableAdvancedFilter?: boolean;\n  startTransition?: React.TransitionStartFunction;\n}\n\nexport function useDataTable<TData>(props: UseDataTableProps<TData>) {\n  const {\n    columns,\n    pageCount = -1,\n    initialState,\n    history = \"replace\",\n    throttleMs = THROTTLE_MS,\n    debounceMs = DEBOUNCE_MS,\n    scroll = false,\n    shallow = true,\n    clearOnDefault = false,\n    enableAdvancedFilter = false,\n    startTransition,\n    ...tableProps\n  } = props;\n\n  const queryStateOptions = React.useMemo<\n    Omit<UseQueryStateOptions<string>, \"parse\">\n  >(\n    () => ({\n      history,\n      scroll,\n      shallow,\n      throttleMs,\n      debounceMs,\n      clearOnDefault,\n      startTransition,\n    }),\n    [\n      history,\n      scroll,\n      shallow,\n      throttleMs,\n      debounceMs,\n      clearOnDefault,\n      startTransition,\n    ],\n  );\n\n  const [rowSelection, setRowSelection] = React.useState<RowSelectionState>(\n    initialState?.rowSelection ?? {},\n  );\n  const [columnVisibility, setColumnVisibility] =\n    React.useState<VisibilityState>(initialState?.columnVisibility ?? {});\n\n  const [page, setPage] = useQueryState(\n    PAGE_KEY,\n    parseAsInteger.withOptions(queryStateOptions).withDefault(1),\n  );\n  const [perPage, setPerPage] = useQueryState(\n    PER_PAGE_KEY,\n    parseAsInteger\n      .withOptions(queryStateOptions)\n      .withDefault(initialState?.pagination?.pageSize ?? 10),\n  );\n\n  const pagination: PaginationState = React.useMemo(() => {\n    return {\n      pageIndex: page - 1, // zero-based index -> one-based index\n      pageSize: perPage,\n    };\n  }, [page, perPage]);\n\n  const onPaginationChange = React.useCallback(\n    (updaterOrValue: Updater<PaginationState>) => {\n      if (typeof updaterOrValue === \"function\") {\n        const newPagination = updaterOrValue(pagination);\n        void setPage(newPagination.pageIndex + 1);\n        void setPerPage(newPagination.pageSize);\n      } else {\n        void setPage(updaterOrValue.pageIndex + 1);\n        void setPerPage(updaterOrValue.pageSize);\n      }\n    },\n    [pagination, setPage, setPerPage],\n  );\n\n  const columnIds = React.useMemo(() => {\n    return new Set(columns.map((column) => column.id).filter(Boolean));\n  }, [columns]);\n\n  const [sorting, setSorting] = useQueryState(\n    SORT_KEY,\n    getSortingStateParser<TData>(columnIds)\n      .withOptions(queryStateOptions)\n      .withDefault(initialState?.sorting ?? []),\n  );\n\n  const onSortingChange = React.useCallback(\n    (updaterOrValue: Updater<SortingState>) => {\n      if (typeof updaterOrValue === \"function\") {\n        const newSorting = updaterOrValue(sorting);\n        setSorting(newSorting as ExtendedColumnSort<TData>[]);\n      } else {\n        setSorting(updaterOrValue as ExtendedColumnSort<TData>[]);\n      }\n    },\n    [sorting, setSorting],\n  );\n\n  const filterableColumns = React.useMemo(() => {\n    if (enableAdvancedFilter) return [];\n\n    return columns.filter((column) => column.enableColumnFilter);\n  }, [columns, enableAdvancedFilter]);\n\n  const filterParsers = React.useMemo(() => {\n    if (enableAdvancedFilter) return {};\n\n    return filterableColumns.reduce<\n      Record<string, Parser<string> | Parser<string[]>>\n    >((acc, column) => {\n      if (column.meta?.options) {\n        acc[column.id ?? \"\"] = parseAsArrayOf(\n          parseAsString,\n          ARRAY_SEPARATOR,\n        ).withOptions(queryStateOptions);\n      } else {\n        acc[column.id ?? \"\"] = parseAsString.withOptions(queryStateOptions);\n      }\n      return acc;\n    }, {});\n  }, [filterableColumns, queryStateOptions, enableAdvancedFilter]);\n\n  const [filterValues, setFilterValues] = useQueryStates(filterParsers);\n\n  const debouncedSetFilterValues = useDebouncedCallback(\n    (values: typeof filterValues) => {\n      void setPage(1);\n      void setFilterValues(values);\n    },\n    debounceMs,\n  );\n\n  const initialColumnFilters: ColumnFiltersState = React.useMemo(() => {\n    if (enableAdvancedFilter) return [];\n\n    return Object.entries(filterValues).reduce<ColumnFiltersState>(\n      (filters, [key, value]) => {\n        if (value !== null) {\n          const processedValue = Array.isArray(value)\n            ? value\n            : typeof value === \"string\" && /[^a-zA-Z0-9]/.test(value)\n              ? value.split(/[^a-zA-Z0-9]+/).filter(Boolean)\n              : [value];\n\n          filters.push({\n            id: key,\n            value: processedValue,\n          });\n        }\n        return filters;\n      },\n      [],\n    );\n  }, [filterValues, enableAdvancedFilter]);\n\n  const [columnFilters, setColumnFilters] =\n    React.useState<ColumnFiltersState>(initialColumnFilters);\n\n  const onColumnFiltersChange = React.useCallback(\n    (updaterOrValue: Updater<ColumnFiltersState>) => {\n      if (enableAdvancedFilter) return;\n\n      setColumnFilters((prev) => {\n        const next =\n          typeof updaterOrValue === \"function\"\n            ? updaterOrValue(prev)\n            : updaterOrValue;\n\n        const filterUpdates = next.reduce<\n          Record<string, string | string[] | null>\n        >((acc, filter) => {\n          if (filterableColumns.find((column) => column.id === filter.id)) {\n            acc[filter.id] = filter.value as string | string[];\n          }\n          return acc;\n        }, {});\n\n        for (const prevFilter of prev) {\n          if (!next.some((filter) => filter.id === prevFilter.id)) {\n            filterUpdates[prevFilter.id] = null;\n          }\n        }\n\n        debouncedSetFilterValues(filterUpdates);\n        return next;\n      });\n    },\n    [debouncedSetFilterValues, filterableColumns, enableAdvancedFilter],\n  );\n\n  const table = useReactTable({\n    ...tableProps,\n    columns,\n    initialState,\n    pageCount,\n    state: {\n      pagination,\n      sorting,\n      columnVisibility,\n      rowSelection,\n      columnFilters,\n    },\n    defaultColumn: {\n      ...tableProps.defaultColumn,\n      enableColumnFilter: false,\n    },\n    enableRowSelection: true,\n    onRowSelectionChange: setRowSelection,\n    onPaginationChange,\n    onSortingChange,\n    onColumnFiltersChange,\n    onColumnVisibilityChange: setColumnVisibility,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFacetedRowModel: getFacetedRowModel(),\n    getFacetedUniqueValues: getFacetedUniqueValues(),\n    getFacetedMinMaxValues: getFacetedMinMaxValues(),\n    manualPagination: true,\n    manualSorting: true,\n    manualFiltering: true,\n  });\n\n  return { table, shallow, debounceMs, throttleMs };\n}\n",
      "type": "registry:hook"
    },
    {
      "path": "src/registry/new-york/hooks/use-debounced-callback.ts",
      "content": "/**\n * @see https://github.com/mantinedev/mantine/blob/master/packages/@mantine/hooks/src/use-debounced-callback/use-debounced-callback.ts\n */\n\nimport * as React from \"react\";\n\nimport { useCallbackRef } from \"@/registry/new-york/hooks/use-callback-ref\";\n\nexport function useDebouncedCallback<T extends (...args: never[]) => unknown>(\n  callback: T,\n  delay: number,\n) {\n  const handleCallback = useCallbackRef(callback);\n  const debounceTimerRef = React.useRef(0);\n  React.useEffect(\n    () => () => window.clearTimeout(debounceTimerRef.current),\n    [],\n  );\n\n  const setValue = React.useCallback(\n    (...args: Parameters<T>) => {\n      window.clearTimeout(debounceTimerRef.current);\n      debounceTimerRef.current = window.setTimeout(\n        () => handleCallback(...args),\n        delay,\n      );\n    },\n    [handleCallback, delay],\n  );\n\n  return setValue;\n}\n",
      "type": "registry:hook"
    },
    {
      "path": "src/registry/new-york/hooks/use-callback-ref.ts",
      "content": "import * as React from \"react\";\n\n/**\n * @see https://github.com/radix-ui/primitives/blob/main/packages/react/use-callback-ref/src/useCallbackRef.tsx\n */\n\n/**\n * A custom hook that converts a callback to a ref to avoid triggering re-renders when passed as a\n * prop or avoid re-executing effects when passed as a dependency\n */\nfunction useCallbackRef<T extends (...args: never[]) => unknown>(\n  callback: T | undefined,\n): T {\n  const callbackRef = React.useRef(callback);\n\n  React.useEffect(() => {\n    callbackRef.current = callback;\n  });\n\n  // https://github.com/facebook/react/issues/19240\n  return React.useMemo(\n    () => ((...args) => callbackRef.current?.(...args)) as T,\n    [],\n  );\n}\n\nexport { useCallbackRef };\n",
      "type": "registry:hook"
    },
    {
      "path": "src/registry/new-york/lib/parsers.ts",
      "content": "import { createParser } from \"nuqs/server\";\nimport { z } from \"zod\";\n\nimport { dataTableConfig } from \"@/config/data-table\";\n\nimport type {\n  ExtendedColumnFilter,\n  ExtendedColumnSort,\n} from \"@/registry/new-york/types/data-table\";\n\nconst sortingItemSchema = z.object({\n  id: z.string(),\n  desc: z.boolean(),\n});\n\nexport const getSortingStateParser = <TData>(\n  columnIds?: string[] | Set<string>,\n) => {\n  const validKeys = columnIds\n    ? columnIds instanceof Set\n      ? columnIds\n      : new Set(columnIds)\n    : null;\n\n  return createParser({\n    parse: (value) => {\n      try {\n        const parsed = JSON.parse(value);\n        const result = z.array(sortingItemSchema).safeParse(parsed);\n\n        if (!result.success) return null;\n\n        if (validKeys && result.data.some((item) => !validKeys.has(item.id))) {\n          return null;\n        }\n\n        return result.data as ExtendedColumnSort<TData>[];\n      } catch {\n        return null;\n      }\n    },\n    serialize: (value) => JSON.stringify(value),\n    eq: (a, b) =>\n      a.length === b.length &&\n      a.every(\n        (item, index) =>\n          item.id === b[index]?.id && item.desc === b[index]?.desc,\n      ),\n  });\n};\n\nexport const filterSchema = z.object({\n  id: z.string(),\n  value: z.union([z.string(), z.array(z.string())]),\n  variant: z.enum(dataTableConfig.filterVariants),\n  operator: z.enum(dataTableConfig.operators),\n  filterId: z.string(),\n});\n\nexport const getFiltersStateParser = <TData>(\n  columnIds?: string[] | Set<string>,\n) => {\n  const validKeys = columnIds\n    ? columnIds instanceof Set\n      ? columnIds\n      : new Set(columnIds)\n    : null;\n\n  return createParser({\n    parse: (value) => {\n      try {\n        const parsed = JSON.parse(value);\n        const result = z.array(filterSchema).safeParse(parsed);\n\n        if (!result.success) return null;\n\n        if (validKeys && result.data.some((item) => !validKeys.has(item.id))) {\n          return null;\n        }\n\n        return result.data as ExtendedColumnFilter<TData>[];\n      } catch {\n        return null;\n      }\n    },\n    serialize: (value) => JSON.stringify(value),\n    eq: (a, b) =>\n      a.length === b.length &&\n      a.every(\n        (filter, index) =>\n          filter.id === b[index]?.id &&\n          filter.value === b[index]?.value &&\n          filter.variant === b[index]?.variant &&\n          filter.operator === b[index]?.operator,\n      ),\n  });\n};\n",
      "type": "registry:lib"
    },
    {
      "path": "src/registry/new-york/lib/id.ts",
      "content": "import { customAlphabet } from \"nanoid\";\n\nconst prefixes: Record<string, unknown> = {};\n\ninterface GenerateIdOptions {\n  length?: number;\n  separator?: string;\n}\n\nexport function generateId(\n  prefixOrOptions?: keyof typeof prefixes | GenerateIdOptions,\n  inputOptions: GenerateIdOptions = {},\n) {\n  const finalOptions =\n    typeof prefixOrOptions === \"object\" ? prefixOrOptions : inputOptions;\n\n  const prefix =\n    typeof prefixOrOptions === \"object\" ? undefined : prefixOrOptions;\n\n  const { length = 12, separator = \"_\" } = finalOptions;\n  const id = customAlphabet(\n    \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\",\n    length,\n  )();\n\n  return prefix ? `${prefixes[prefix]}${separator}${id}` : id;\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "src/registry/new-york/types/data-table.ts",
      "content": "import type { DataTableConfig } from \"@/config/data-table\";\nimport type { filterSchema } from \"@/registry/new-york/lib/parsers\";\nimport type { ColumnSort, Row, RowData } from \"@tanstack/react-table\";\nimport type { z } from \"zod\";\n\ndeclare module \"@tanstack/react-table\" {\n  // biome-ignore lint/correctness/noUnusedVariables: <explanation>\n  interface ColumnMeta<TData extends RowData, TValue> {\n    label?: string;\n    placeholder?: string;\n    variant?: FilterVariant;\n    options?: Option[];\n    range?: [number, number];\n    unit?: string;\n    icon?: React.ComponentType<{ className?: string }>;\n  }\n}\n\nexport interface Option {\n  label: string;\n  value: string;\n  count?: number;\n  icon?: React.ComponentType<{ className?: string }>;\n}\n\nexport type FilterOperator = DataTableConfig[\"operators\"][number];\nexport type FilterVariant = DataTableConfig[\"filterVariants\"][number];\nexport type JoinOperator = DataTableConfig[\"joinOperators\"][number];\n\nexport interface ExtendedColumnSort<TData> extends Omit<ColumnSort, \"id\"> {\n  id: Extract<keyof TData, string>;\n}\n\nexport interface ExtendedColumnFilter<TData>\n  extends z.infer<typeof filterSchema> {\n  id: Extract<keyof TData, string>;\n}\n\nexport interface DataTableRowAction<TData> {\n  row: Row<TData>;\n  variant: \"update\" | \"delete\";\n}\n",
      "type": "registry:file",
      "target": "types/data-table.ts"
    }
  ]
}