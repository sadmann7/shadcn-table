{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "data-table-filter-list",
  "type": "registry:component",
  "title": "Data Table Filter List",
  "description": "A filter list component for the data table",
  "dependencies": [
    "@tanstack/react-table",
    "lucide-react",
    "nanoid",
    "nuqs"
  ],
  "registryDependencies": [
    "badge",
    "button",
    "calendar",
    "command",
    "input",
    "popover",
    "select"
  ],
  "files": [
    {
      "path": "src/components/data-table/data-table-filter-list.tsx",
      "content": "\"use client\";\r\n\r\nimport type { Column, ColumnMeta, Table } from \"@tanstack/react-table\";\r\nimport {\r\n  CalendarIcon,\r\n  Check,\r\n  ChevronsUpDown,\r\n  GripVertical,\r\n  ListFilter,\r\n  Trash2,\r\n} from \"lucide-react\";\r\nimport { parseAsStringEnum, useQueryState } from \"nuqs\";\r\nimport * as React from \"react\";\r\n\r\nimport { DataTableRangeFilter } from \"@/components/data-table/data-table-range-filter\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Calendar } from \"@/components/ui/calendar\";\r\nimport {\r\n  Command,\r\n  CommandEmpty,\r\n  CommandGroup,\r\n  CommandInput,\r\n  CommandItem,\r\n  CommandList,\r\n} from \"@/components/ui/command\";\r\nimport {\r\n  Faceted,\r\n  FacetedBadgeList,\r\n  FacetedContent,\r\n  FacetedEmpty,\r\n  FacetedGroup,\r\n  FacetedInput,\r\n  FacetedItem,\r\n  FacetedList,\r\n  FacetedTrigger,\r\n} from \"@/components/ui/faceted\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport {\r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n} from \"@/components/ui/popover\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\nimport {\r\n  Sortable,\r\n  SortableContent,\r\n  SortableItem,\r\n  SortableItemHandle,\r\n  SortableOverlay,\r\n} from \"@/components/ui/sortable\";\r\nimport { dataTableConfig } from \"@/config/data-table\";\r\nimport { useDebouncedCallback } from \"@/hooks/use-debounced-callback\";\r\nimport { getDefaultFilterOperator, getFilterOperators } from \"@/lib/data-table\";\r\nimport { formatDate } from \"@/lib/format\";\r\nimport { generateId } from \"@/lib/id\";\r\nimport { getFiltersStateParser } from \"@/lib/parsers\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport type {\r\n  ExtendedColumnFilter,\r\n  FilterOperator,\r\n  JoinOperator,\r\n} from \"@/types/data-table\";\r\n\r\nconst FILTERS_KEY = \"filters\";\r\nconst JOIN_OPERATOR_KEY = \"joinOperator\";\r\nconst DEBOUNCE_MS = 300;\r\nconst THROTTLE_MS = 50;\r\nconst OPEN_MENU_SHORTCUT = \"f\";\r\nconst REMOVE_FILTER_SHORTCUTS = [\"backspace\", \"delete\"];\r\n\r\ninterface DataTableFilterListProps<TData>\r\n  extends React.ComponentProps<typeof PopoverContent> {\r\n  table: Table<TData>;\r\n  debounceMs?: number;\r\n  throttleMs?: number;\r\n  shallow?: boolean;\r\n}\r\n\r\nexport function DataTableFilterList<TData>({\r\n  table,\r\n  debounceMs = DEBOUNCE_MS,\r\n  throttleMs = THROTTLE_MS,\r\n  shallow = true,\r\n  ...props\r\n}: DataTableFilterListProps<TData>) {\r\n  const id = React.useId();\r\n  const labelId = React.useId();\r\n  const descriptionId = React.useId();\r\n  const [open, setOpen] = React.useState(false);\r\n  const addButtonRef = React.useRef<HTMLButtonElement>(null);\r\n\r\n  const columns = React.useMemo(() => {\r\n    return table\r\n      .getAllColumns()\r\n      .filter((column) => column.columnDef.enableColumnFilter);\r\n  }, [table]);\r\n\r\n  const [filters, setFilters] = useQueryState(\r\n    FILTERS_KEY,\r\n    getFiltersStateParser<TData>(columns.map((field) => field.id))\r\n      .withDefault([])\r\n      .withOptions({\r\n        clearOnDefault: true,\r\n        shallow,\r\n        throttleMs,\r\n      }),\r\n  );\r\n  const debouncedSetFilters = useDebouncedCallback(setFilters, debounceMs);\r\n\r\n  const [joinOperator, setJoinOperator] = useQueryState(\r\n    JOIN_OPERATOR_KEY,\r\n    parseAsStringEnum([\"and\", \"or\"]).withDefault(\"and\").withOptions({\r\n      clearOnDefault: true,\r\n      shallow,\r\n    }),\r\n  );\r\n\r\n  const onFilterAdd = React.useCallback(() => {\r\n    const column = columns[0];\r\n\r\n    if (!column) return;\r\n\r\n    debouncedSetFilters([\r\n      ...filters,\r\n      {\r\n        id: column.id as Extract<keyof TData, string>,\r\n        value: \"\",\r\n        variant: column.columnDef.meta?.variant ?? \"text\",\r\n        operator: getDefaultFilterOperator(\r\n          column.columnDef.meta?.variant ?? \"text\",\r\n        ),\r\n        filterId: generateId({ length: 8 }),\r\n      },\r\n    ]);\r\n  }, [columns, filters, debouncedSetFilters]);\r\n\r\n  const onFilterUpdate = React.useCallback(\r\n    (\r\n      filterId: string,\r\n      updates: Partial<Omit<ExtendedColumnFilter<TData>, \"filterId\">>,\r\n    ) => {\r\n      debouncedSetFilters((prevFilters) => {\r\n        const updatedFilters = prevFilters.map((filter) => {\r\n          if (filter.filterId === filterId) {\r\n            return { ...filter, ...updates } as ExtendedColumnFilter<TData>;\r\n          }\r\n          return filter;\r\n        });\r\n        return updatedFilters;\r\n      });\r\n    },\r\n    [debouncedSetFilters],\r\n  );\r\n\r\n  const onFilterRemove = React.useCallback(\r\n    (filterId: string) => {\r\n      const updatedFilters = filters.filter(\r\n        (filter) => filter.filterId !== filterId,\r\n      );\r\n      void setFilters(updatedFilters);\r\n      requestAnimationFrame(() => {\r\n        addButtonRef.current?.focus();\r\n      });\r\n    },\r\n    [filters, setFilters],\r\n  );\r\n\r\n  const onFiltersReset = React.useCallback(() => {\r\n    void setFilters(null);\r\n    void setJoinOperator(\"and\");\r\n  }, [setFilters, setJoinOperator]);\r\n\r\n  React.useEffect(() => {\r\n    function onKeyDown(event: KeyboardEvent) {\r\n      if (\r\n        event.target instanceof HTMLInputElement ||\r\n        event.target instanceof HTMLTextAreaElement\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      if (\r\n        event.key.toLowerCase() === OPEN_MENU_SHORTCUT &&\r\n        !event.ctrlKey &&\r\n        !event.metaKey &&\r\n        !event.shiftKey\r\n      ) {\r\n        event.preventDefault();\r\n        setOpen(true);\r\n      }\r\n\r\n      if (\r\n        event.key.toLowerCase() === OPEN_MENU_SHORTCUT &&\r\n        event.shiftKey &&\r\n        filters.length > 0\r\n      ) {\r\n        event.preventDefault();\r\n        onFilterRemove(filters[filters.length - 1]?.filterId ?? \"\");\r\n      }\r\n    }\r\n\r\n    window.addEventListener(\"keydown\", onKeyDown);\r\n    return () => window.removeEventListener(\"keydown\", onKeyDown);\r\n  }, [filters, onFilterRemove]);\r\n\r\n  const onTriggerKeyDown = React.useCallback(\r\n    (event: React.KeyboardEvent<HTMLButtonElement>) => {\r\n      if (\r\n        REMOVE_FILTER_SHORTCUTS.includes(event.key.toLowerCase()) &&\r\n        filters.length > 0\r\n      ) {\r\n        event.preventDefault();\r\n        onFilterRemove(filters[filters.length - 1]?.filterId ?? \"\");\r\n      }\r\n    },\r\n    [filters, onFilterRemove],\r\n  );\r\n\r\n  return (\r\n    <Sortable\r\n      value={filters}\r\n      onValueChange={setFilters}\r\n      getItemValue={(item) => item.filterId}\r\n    >\r\n      <Popover open={open} onOpenChange={setOpen}>\r\n        <PopoverTrigger asChild>\r\n          <Button variant=\"outline\" size=\"sm\" onKeyDown={onTriggerKeyDown}>\r\n            <ListFilter />\r\n            Filter\r\n            {filters.length > 0 && (\r\n              <Badge\r\n                variant=\"secondary\"\r\n                className=\"h-[18.24px] rounded-[3.2px] px-[5.12px] font-mono font-normal text-[10.4px]\"\r\n              >\r\n                {filters.length}\r\n              </Badge>\r\n            )}\r\n          </Button>\r\n        </PopoverTrigger>\r\n        <PopoverContent\r\n          aria-describedby={descriptionId}\r\n          aria-labelledby={labelId}\r\n          className=\"flex w-full max-w-[var(--radix-popover-content-available-width)] origin-[var(--radix-popover-content-transform-origin)] flex-col gap-3.5 p-4 sm:min-w-[380px]\"\r\n          {...props}\r\n        >\r\n          <div className=\"flex flex-col gap-1\">\r\n            <h4 id={labelId} className=\"font-medium leading-none\">\r\n              {filters.length > 0 ? \"Filters\" : \"No filters applied\"}\r\n            </h4>\r\n            <p\r\n              id={descriptionId}\r\n              className={cn(\r\n                \"text-muted-foreground text-sm\",\r\n                filters.length > 0 && \"sr-only\",\r\n              )}\r\n            >\r\n              {filters.length > 0\r\n                ? \"Modify filters to refine your rows.\"\r\n                : \"Add filters to refine your rows.\"}\r\n            </p>\r\n          </div>\r\n          {filters.length > 0 ? (\r\n            <SortableContent asChild>\r\n              <div\r\n                role=\"list\"\r\n                className=\"flex max-h-[300px] flex-col gap-2 overflow-y-auto p-1\"\r\n              >\r\n                {filters.map((filter, index) => (\r\n                  <DataTableFilterItem<TData>\r\n                    key={filter.filterId}\r\n                    filter={filter}\r\n                    index={index}\r\n                    filterItemId={`${id}-filter-${filter.filterId}`}\r\n                    joinOperator={joinOperator}\r\n                    setJoinOperator={setJoinOperator}\r\n                    columns={columns}\r\n                    onFilterUpdate={onFilterUpdate}\r\n                    onFilterRemove={onFilterRemove}\r\n                  />\r\n                ))}\r\n              </div>\r\n            </SortableContent>\r\n          ) : null}\r\n          <div className=\"flex w-full items-center gap-2\">\r\n            <Button\r\n              size=\"sm\"\r\n              className=\"rounded\"\r\n              ref={addButtonRef}\r\n              onClick={onFilterAdd}\r\n            >\r\n              Add filter\r\n            </Button>\r\n            {filters.length > 0 ? (\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                className=\"rounded\"\r\n                onClick={onFiltersReset}\r\n              >\r\n                Reset filters\r\n              </Button>\r\n            ) : null}\r\n          </div>\r\n        </PopoverContent>\r\n      </Popover>\r\n      <SortableOverlay>\r\n        <div className=\"flex items-center gap-2\">\r\n          <div className=\"h-8 min-w-[72px] rounded-sm bg-primary/10\" />\r\n          <div className=\"h-8 w-32 rounded-sm bg-primary/10\" />\r\n          <div className=\"h-8 w-32 rounded-sm bg-primary/10\" />\r\n          <div className=\"h-8 min-w-36 flex-1 rounded-sm bg-primary/10\" />\r\n          <div className=\"size-8 shrink-0 rounded-sm bg-primary/10\" />\r\n          <div className=\"size-8 shrink-0 rounded-sm bg-primary/10\" />\r\n        </div>\r\n      </SortableOverlay>\r\n    </Sortable>\r\n  );\r\n}\r\n\r\ninterface DataTableFilterItemProps<TData> {\r\n  filter: ExtendedColumnFilter<TData>;\r\n  index: number;\r\n  filterItemId: string;\r\n  joinOperator: JoinOperator;\r\n  setJoinOperator: (value: JoinOperator) => void;\r\n  columns: Column<TData>[];\r\n  onFilterUpdate: (\r\n    filterId: string,\r\n    updates: Partial<Omit<ExtendedColumnFilter<TData>, \"filterId\">>,\r\n  ) => void;\r\n  onFilterRemove: (filterId: string) => void;\r\n}\r\n\r\nfunction DataTableFilterItem<TData>({\r\n  filter,\r\n  index,\r\n  filterItemId,\r\n  joinOperator,\r\n  setJoinOperator,\r\n  columns,\r\n  onFilterUpdate,\r\n  onFilterRemove,\r\n}: DataTableFilterItemProps<TData>) {\r\n  const [showFieldSelector, setShowFieldSelector] = React.useState(false);\r\n  const [showOperatorSelector, setShowOperatorSelector] = React.useState(false);\r\n  const [showValueSelector, setShowValueSelector] = React.useState(false);\r\n\r\n  const column = columns.find((column) => column.id === filter.id);\r\n  if (!column) return null;\r\n\r\n  const joinOperatorListboxId = `${filterItemId}-join-operator-listbox`;\r\n  const fieldListboxId = `${filterItemId}-field-listbox`;\r\n  const operatorListboxId = `${filterItemId}-operator-listbox`;\r\n  const inputId = `${filterItemId}-input`;\r\n\r\n  const columnMeta = column.columnDef.meta;\r\n  const filterOperators = getFilterOperators(filter.variant);\r\n\r\n  const onItemKeyDown = React.useCallback(\r\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\r\n      if (\r\n        event.target instanceof HTMLInputElement ||\r\n        event.target instanceof HTMLTextAreaElement\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      if (showFieldSelector || showOperatorSelector || showValueSelector) {\r\n        return;\r\n      }\r\n\r\n      if (REMOVE_FILTER_SHORTCUTS.includes(event.key.toLowerCase())) {\r\n        event.preventDefault();\r\n        onFilterRemove(filter.filterId);\r\n      }\r\n    },\r\n    [\r\n      filter.filterId,\r\n      showFieldSelector,\r\n      showOperatorSelector,\r\n      showValueSelector,\r\n      onFilterRemove,\r\n    ],\r\n  );\r\n\r\n  return (\r\n    <SortableItem value={filter.filterId} asChild>\r\n      <div\r\n        role=\"listitem\"\r\n        id={filterItemId}\r\n        tabIndex={-1}\r\n        className=\"flex items-center gap-2\"\r\n        onKeyDown={onItemKeyDown}\r\n      >\r\n        <div className=\"min-w-[72px] text-center\">\r\n          {index === 0 ? (\r\n            <span className=\"text-muted-foreground text-sm\">Where</span>\r\n          ) : index === 1 ? (\r\n            <Select\r\n              value={joinOperator}\r\n              onValueChange={(value: JoinOperator) => setJoinOperator(value)}\r\n            >\r\n              <SelectTrigger\r\n                aria-label=\"Select join operator\"\r\n                aria-controls={joinOperatorListboxId}\r\n                className=\"h-8 rounded lowercase [&[data-size]]:h-8\"\r\n              >\r\n                <SelectValue placeholder={joinOperator} />\r\n              </SelectTrigger>\r\n              <SelectContent\r\n                id={joinOperatorListboxId}\r\n                position=\"popper\"\r\n                className=\"min-w-(--radix-select-trigger-width) lowercase\"\r\n              >\r\n                {dataTableConfig.joinOperators.map((joinOperator) => (\r\n                  <SelectItem key={joinOperator} value={joinOperator}>\r\n                    {joinOperator}\r\n                  </SelectItem>\r\n                ))}\r\n              </SelectContent>\r\n            </Select>\r\n          ) : (\r\n            <span className=\"text-muted-foreground text-sm\">\r\n              {joinOperator}\r\n            </span>\r\n          )}\r\n        </div>\r\n        <Popover open={showFieldSelector} onOpenChange={setShowFieldSelector}>\r\n          <PopoverTrigger asChild>\r\n            <Button\r\n              role=\"combobox\"\r\n              aria-controls={fieldListboxId}\r\n              variant=\"outline\"\r\n              size=\"sm\"\r\n              className=\"w-32 justify-between rounded font-normal\"\r\n            >\r\n              <span className=\"truncate\">\r\n                {columns.find((column) => column.id === filter.id)?.columnDef\r\n                  .meta?.label ?? \"Select field\"}\r\n              </span>\r\n              <ChevronsUpDown className=\"opacity-50\" />\r\n            </Button>\r\n          </PopoverTrigger>\r\n          <PopoverContent\r\n            id={fieldListboxId}\r\n            align=\"start\"\r\n            className=\"w-40 origin-[var(--radix-popover-content-transform-origin)] p-0\"\r\n          >\r\n            <Command>\r\n              <CommandInput placeholder=\"Search fields...\" />\r\n              <CommandList>\r\n                <CommandEmpty>No fields found.</CommandEmpty>\r\n                <CommandGroup>\r\n                  {columns.map((column) => (\r\n                    <CommandItem\r\n                      key={column.id}\r\n                      value={column.id}\r\n                      onSelect={(value) => {\r\n                        onFilterUpdate(filter.filterId, {\r\n                          id: value as Extract<keyof TData, string>,\r\n                          variant: column.columnDef.meta?.variant ?? \"text\",\r\n                          operator: getDefaultFilterOperator(\r\n                            column.columnDef.meta?.variant ?? \"text\",\r\n                          ),\r\n                          value: \"\",\r\n                        });\r\n\r\n                        setShowFieldSelector(false);\r\n                      }}\r\n                    >\r\n                      <span className=\"truncate\">\r\n                        {column.columnDef.meta?.label}\r\n                      </span>\r\n                      <Check\r\n                        className={cn(\r\n                          \"ml-auto\",\r\n                          column.id === filter.id ? \"opacity-100\" : \"opacity-0\",\r\n                        )}\r\n                      />\r\n                    </CommandItem>\r\n                  ))}\r\n                </CommandGroup>\r\n              </CommandList>\r\n            </Command>\r\n          </PopoverContent>\r\n        </Popover>\r\n        <Select\r\n          open={showOperatorSelector}\r\n          onOpenChange={setShowOperatorSelector}\r\n          value={filter.operator}\r\n          onValueChange={(value: FilterOperator) =>\r\n            onFilterUpdate(filter.filterId, {\r\n              operator: value,\r\n              value:\r\n                value === \"isEmpty\" || value === \"isNotEmpty\"\r\n                  ? \"\"\r\n                  : filter.value,\r\n            })\r\n          }\r\n        >\r\n          <SelectTrigger\r\n            aria-controls={operatorListboxId}\r\n            className=\"h-8 w-32 rounded lowercase [&[data-size]]:h-8\"\r\n          >\r\n            <div className=\"truncate\">\r\n              <SelectValue placeholder={filter.operator} />\r\n            </div>\r\n          </SelectTrigger>\r\n          <SelectContent\r\n            id={operatorListboxId}\r\n            className=\"origin-[var(--radix-select-content-transform-origin)]\"\r\n          >\r\n            {filterOperators.map((operator) => (\r\n              <SelectItem\r\n                key={operator.value}\r\n                value={operator.value}\r\n                className=\"lowercase\"\r\n              >\r\n                {operator.label}\r\n              </SelectItem>\r\n            ))}\r\n          </SelectContent>\r\n        </Select>\r\n        <div className=\"min-w-36 flex-1\">\r\n          {onFilterInputRender({\r\n            filter,\r\n            inputId,\r\n            column,\r\n            columnMeta,\r\n            onFilterUpdate,\r\n            showValueSelector,\r\n            setShowValueSelector,\r\n          })}\r\n        </div>\r\n        <Button\r\n          aria-controls={filterItemId}\r\n          variant=\"outline\"\r\n          size=\"icon\"\r\n          className=\"size-8 rounded\"\r\n          onClick={() => onFilterRemove(filter.filterId)}\r\n        >\r\n          <Trash2 />\r\n        </Button>\r\n        <SortableItemHandle asChild>\r\n          <Button variant=\"outline\" size=\"icon\" className=\"size-8 rounded\">\r\n            <GripVertical />\r\n          </Button>\r\n        </SortableItemHandle>\r\n      </div>\r\n    </SortableItem>\r\n  );\r\n}\r\n\r\nfunction onFilterInputRender<TData>({\r\n  filter,\r\n  inputId,\r\n  column,\r\n  columnMeta,\r\n  onFilterUpdate,\r\n  showValueSelector,\r\n  setShowValueSelector,\r\n}: {\r\n  filter: ExtendedColumnFilter<TData>;\r\n  inputId: string;\r\n  column: Column<TData>;\r\n  columnMeta?: ColumnMeta<TData, unknown>;\r\n  onFilterUpdate: (\r\n    filterId: string,\r\n    updates: Partial<Omit<ExtendedColumnFilter<TData>, \"filterId\">>,\r\n  ) => void;\r\n  showValueSelector: boolean;\r\n  setShowValueSelector: (value: boolean) => void;\r\n}) {\r\n  if (filter.operator === \"isEmpty\" || filter.operator === \"isNotEmpty\") {\r\n    return (\r\n      <div\r\n        id={inputId}\r\n        role=\"status\"\r\n        aria-label={`${columnMeta?.label} filter is ${\r\n          filter.operator === \"isEmpty\" ? \"empty\" : \"not empty\"\r\n        }`}\r\n        aria-live=\"polite\"\r\n        className=\"h-8 w-full rounded border bg-transparent dark:bg-input/30\"\r\n      />\r\n    );\r\n  }\r\n\r\n  switch (filter.variant) {\r\n    case \"text\":\r\n    case \"number\":\r\n    case \"range\": {\r\n      if (\r\n        (filter.variant === \"range\" && filter.operator === \"isBetween\") ||\r\n        filter.operator === \"isBetween\"\r\n      ) {\r\n        return (\r\n          <DataTableRangeFilter\r\n            filter={filter}\r\n            column={column}\r\n            inputId={inputId}\r\n            onFilterUpdate={onFilterUpdate}\r\n          />\r\n        );\r\n      }\r\n\r\n      const isNumber =\r\n        filter.variant === \"number\" || filter.variant === \"range\";\r\n\r\n      return (\r\n        <Input\r\n          id={inputId}\r\n          type={isNumber ? \"number\" : filter.variant}\r\n          aria-label={`${columnMeta?.label} filter value`}\r\n          aria-describedby={`${inputId}-description`}\r\n          inputMode={isNumber ? \"numeric\" : undefined}\r\n          placeholder={columnMeta?.placeholder ?? \"Enter a value...\"}\r\n          className=\"h-8 w-full rounded\"\r\n          defaultValue={\r\n            typeof filter.value === \"string\" ? filter.value : undefined\r\n          }\r\n          onChange={(event) =>\r\n            onFilterUpdate(filter.filterId, {\r\n              value: event.target.value,\r\n            })\r\n          }\r\n        />\r\n      );\r\n    }\r\n\r\n    case \"boolean\": {\r\n      if (Array.isArray(filter.value)) return null;\r\n\r\n      const inputListboxId = `${inputId}-listbox`;\r\n\r\n      return (\r\n        <Select\r\n          open={showValueSelector}\r\n          onOpenChange={setShowValueSelector}\r\n          value={filter.value}\r\n          onValueChange={(value) =>\r\n            onFilterUpdate(filter.filterId, {\r\n              value,\r\n            })\r\n          }\r\n        >\r\n          <SelectTrigger\r\n            id={inputId}\r\n            aria-controls={inputListboxId}\r\n            aria-label={`${columnMeta?.label} boolean filter`}\r\n            className=\"h-8 w-full rounded [&[data-size]]:h-8\"\r\n          >\r\n            <SelectValue placeholder={filter.value ? \"True\" : \"False\"} />\r\n          </SelectTrigger>\r\n          <SelectContent id={inputListboxId}>\r\n            <SelectItem value=\"true\">True</SelectItem>\r\n            <SelectItem value=\"false\">False</SelectItem>\r\n          </SelectContent>\r\n        </Select>\r\n      );\r\n    }\r\n\r\n    case \"select\":\r\n    case \"multiSelect\": {\r\n      const inputListboxId = `${inputId}-listbox`;\r\n\r\n      const multiple = filter.variant === \"multiSelect\";\r\n      const selectedValues = multiple\r\n        ? Array.isArray(filter.value)\r\n          ? filter.value\r\n          : []\r\n        : typeof filter.value === \"string\"\r\n          ? filter.value\r\n          : undefined;\r\n\r\n      return (\r\n        <Faceted\r\n          open={showValueSelector}\r\n          onOpenChange={setShowValueSelector}\r\n          value={selectedValues}\r\n          onValueChange={(value) => {\r\n            onFilterUpdate(filter.filterId, {\r\n              value,\r\n            });\r\n          }}\r\n          multiple={multiple}\r\n        >\r\n          <FacetedTrigger asChild>\r\n            <Button\r\n              id={inputId}\r\n              aria-controls={inputListboxId}\r\n              aria-label={`${columnMeta?.label} filter value${multiple ? \"s\" : \"\"}`}\r\n              variant=\"outline\"\r\n              size=\"sm\"\r\n              className=\"w-full rounded font-normal\"\r\n            >\r\n              <FacetedBadgeList\r\n                options={columnMeta?.options}\r\n                placeholder={\r\n                  columnMeta?.placeholder ??\r\n                  `Select option${multiple ? \"s\" : \"\"}...`\r\n                }\r\n              />\r\n            </Button>\r\n          </FacetedTrigger>\r\n          <FacetedContent\r\n            id={inputListboxId}\r\n            className=\"w-[200px] origin-[var(--radix-popover-content-transform-origin)]\"\r\n          >\r\n            <FacetedInput\r\n              aria-label={`Search ${columnMeta?.label} options`}\r\n              placeholder={columnMeta?.placeholder ?? \"Search options...\"}\r\n            />\r\n            <FacetedList>\r\n              <FacetedEmpty>No options found.</FacetedEmpty>\r\n              <FacetedGroup>\r\n                {columnMeta?.options?.map((option) => (\r\n                  <FacetedItem key={option.value} value={option.value}>\r\n                    {option.icon && <option.icon />}\r\n                    <span>{option.label}</span>\r\n                    {option.count && (\r\n                      <span className=\"ml-auto font-mono text-xs\">\r\n                        {option.count}\r\n                      </span>\r\n                    )}\r\n                  </FacetedItem>\r\n                ))}\r\n              </FacetedGroup>\r\n            </FacetedList>\r\n          </FacetedContent>\r\n        </Faceted>\r\n      );\r\n    }\r\n\r\n    case \"date\":\r\n    case \"dateRange\": {\r\n      const inputListboxId = `${inputId}-listbox`;\r\n\r\n      const dateValue = Array.isArray(filter.value)\r\n        ? filter.value.filter(Boolean)\r\n        : [filter.value, filter.value].filter(Boolean);\r\n\r\n      const displayValue =\r\n        filter.operator === \"isBetween\" && dateValue.length === 2\r\n          ? `${formatDate(new Date(Number(dateValue[0])))} - ${formatDate(\r\n              new Date(Number(dateValue[1])),\r\n            )}`\r\n          : dateValue[0]\r\n            ? formatDate(new Date(Number(dateValue[0])))\r\n            : \"Pick a date\";\r\n\r\n      return (\r\n        <Popover open={showValueSelector} onOpenChange={setShowValueSelector}>\r\n          <PopoverTrigger asChild>\r\n            <Button\r\n              id={inputId}\r\n              aria-controls={inputListboxId}\r\n              aria-label={`${columnMeta?.label} date filter`}\r\n              variant=\"outline\"\r\n              size=\"sm\"\r\n              className={cn(\r\n                \"w-full justify-start rounded text-left font-normal\",\r\n                !filter.value && \"text-muted-foreground\",\r\n              )}\r\n            >\r\n              <CalendarIcon />\r\n              <span className=\"truncate\">{displayValue}</span>\r\n            </Button>\r\n          </PopoverTrigger>\r\n          <PopoverContent\r\n            id={inputListboxId}\r\n            align=\"start\"\r\n            className=\"w-auto origin-[var(--radix-popover-content-transform-origin)] p-0\"\r\n          >\r\n            {filter.operator === \"isBetween\" ? (\r\n              <Calendar\r\n                aria-label={`Select ${columnMeta?.label} date range`}\r\n                mode=\"range\"\r\n                initialFocus\r\n                selected={\r\n                  dateValue.length === 2\r\n                    ? {\r\n                        from: new Date(Number(dateValue[0])),\r\n                        to: new Date(Number(dateValue[1])),\r\n                      }\r\n                    : {\r\n                        from: new Date(),\r\n                        to: new Date(),\r\n                      }\r\n                }\r\n                onSelect={(date) => {\r\n                  onFilterUpdate(filter.filterId, {\r\n                    value: date\r\n                      ? [\r\n                          (date.from?.getTime() ?? \"\").toString(),\r\n                          (date.to?.getTime() ?? \"\").toString(),\r\n                        ]\r\n                      : [],\r\n                  });\r\n                }}\r\n              />\r\n            ) : (\r\n              <Calendar\r\n                aria-label={`Select ${columnMeta?.label} date`}\r\n                mode=\"single\"\r\n                initialFocus\r\n                selected={\r\n                  dateValue[0] ? new Date(Number(dateValue[0])) : undefined\r\n                }\r\n                onSelect={(date) => {\r\n                  onFilterUpdate(filter.filterId, {\r\n                    value: (date?.getTime() ?? \"\").toString(),\r\n                  });\r\n                }}\r\n              />\r\n            )}\r\n          </PopoverContent>\r\n        </Popover>\r\n      );\r\n    }\r\n\r\n    default:\r\n      return null;\r\n  }\r\n}\r\n",
      "type": "registry:component",
      "target": "src/components/data-table/data-table-filter-list.tsx"
    },
    {
      "path": "src/components/data-table/data-table-range-filter.tsx",
      "content": "\"use client\";\n\nimport type { Column } from \"@tanstack/react-table\";\nimport * as React from \"react\";\n\nimport { Input } from \"@/components/ui/input\";\nimport { cn } from \"@/lib/utils\";\nimport type { ExtendedColumnFilter } from \"@/types/data-table\";\n\ninterface DataTableRangeFilterProps<TData> extends React.ComponentProps<\"div\"> {\n  filter: ExtendedColumnFilter<TData>;\n  column: Column<TData>;\n  inputId: string;\n  onFilterUpdate: (\n    filterId: string,\n    updates: Partial<Omit<ExtendedColumnFilter<TData>, \"filterId\">>,\n  ) => void;\n}\n\nexport function DataTableRangeFilter<TData>({\n  filter,\n  column,\n  inputId,\n  onFilterUpdate,\n  className,\n  ...props\n}: DataTableRangeFilterProps<TData>) {\n  const meta = column.columnDef.meta;\n\n  const [min, max] = React.useMemo(() => {\n    const range = column.columnDef.meta?.range;\n    if (range) return range;\n\n    const values = column.getFacetedMinMaxValues();\n    if (!values) return [0, 100];\n\n    return [values[0], values[1]];\n  }, [column]);\n\n  const formatValue = React.useCallback(\n    (value: string | number | undefined) => {\n      if (value === undefined || value === \"\") return \"\";\n      const numValue = Number(value);\n      return Number.isNaN(numValue)\n        ? \"\"\n        : numValue.toLocaleString(undefined, {\n            maximumFractionDigits: 0,\n          });\n    },\n    [],\n  );\n\n  const value = React.useMemo(() => {\n    if (Array.isArray(filter.value)) return filter.value.map(formatValue);\n    return [formatValue(filter.value), \"\"];\n  }, [filter.value, formatValue]);\n\n  const onRangeValueChange = React.useCallback(\n    (value: string, isMin?: boolean) => {\n      const numValue = Number(value);\n      const currentValues = Array.isArray(filter.value)\n        ? filter.value\n        : [\"\", \"\"];\n      const otherValue = isMin\n        ? (currentValues[1] ?? \"\")\n        : (currentValues[0] ?? \"\");\n\n      if (\n        value === \"\" ||\n        (!Number.isNaN(numValue) &&\n          (isMin\n            ? numValue >= min && numValue <= (Number(otherValue) || max)\n            : numValue <= max && numValue >= (Number(otherValue) || min)))\n      ) {\n        onFilterUpdate(filter.filterId, {\n          value: isMin ? [value, otherValue] : [otherValue, value],\n        });\n      }\n    },\n    [filter.filterId, filter.value, min, max, onFilterUpdate],\n  );\n\n  return (\n    <div\n      data-slot=\"range\"\n      className={cn(\"flex w-full items-center gap-2\", className)}\n      {...props}\n    >\n      <Input\n        id={`${inputId}-min`}\n        type=\"number\"\n        aria-label={`${meta?.label} minimum value`}\n        aria-valuemin={min}\n        aria-valuemax={max}\n        data-slot=\"range-min\"\n        inputMode=\"numeric\"\n        placeholder={min.toString()}\n        min={min}\n        max={max}\n        className=\"h-8 w-full rounded\"\n        defaultValue={value[0]}\n        onChange={(event) => onRangeValueChange(event.target.value, true)}\n      />\n      <span className=\"sr-only shrink-0 text-muted-foreground\">to</span>\n      <Input\n        id={`${inputId}-max`}\n        type=\"number\"\n        aria-label={`${meta?.label} maximum value`}\n        aria-valuemin={min}\n        aria-valuemax={max}\n        data-slot=\"range-max\"\n        inputMode=\"numeric\"\n        placeholder={max.toString()}\n        min={min}\n        max={max}\n        className=\"h-8 w-full rounded\"\n        defaultValue={value[1]}\n        onChange={(event) => onRangeValueChange(event.target.value)}\n      />\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "src/components/data-table/data-table-range-filter.tsx"
    },
    {
      "path": "src/components/data-table/data-table-advanced-toolbar.tsx",
      "content": "\"use client\";\n\nimport type { Table } from \"@tanstack/react-table\";\nimport type * as React from \"react\";\n\nimport { DataTableViewOptions } from \"@/components/data-table/data-table-view-options\";\nimport { cn } from \"@/lib/utils\";\n\ninterface DataTableAdvancedToolbarProps<TData>\n  extends React.ComponentProps<\"div\"> {\n  table: Table<TData>;\n}\n\nexport function DataTableAdvancedToolbar<TData>({\n  table,\n  children,\n  className,\n  ...props\n}: DataTableAdvancedToolbarProps<TData>) {\n  return (\n    <div\n      role=\"toolbar\"\n      aria-orientation=\"horizontal\"\n      className={cn(\n        \"flex w-full items-start justify-between gap-2 p-1\",\n        className,\n      )}\n      {...props}\n    >\n      <div className=\"flex flex-1 flex-wrap items-center gap-2\">{children}</div>\n      <div className=\"flex items-center gap-2\">\n        <DataTableViewOptions table={table} />\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "src/components/data-table/data-table-advanced-toolbar.tsx"
    },
    {
      "path": "src/components/ui/sortable.tsx",
      "content": "\"use client\";\n\nimport {\n  type Announcements,\n  DndContext,\n  type DndContextProps,\n  type DragEndEvent,\n  DragOverlay,\n  type DraggableSyntheticListeners,\n  type DropAnimation,\n  KeyboardSensor,\n  MouseSensor,\n  type ScreenReaderInstructions,\n  TouchSensor,\n  type UniqueIdentifier,\n  closestCenter,\n  closestCorners,\n  defaultDropAnimationSideEffects,\n  useSensor,\n  useSensors,\n} from \"@dnd-kit/core\";\nimport {\n  restrictToHorizontalAxis,\n  restrictToParentElement,\n  restrictToVerticalAxis,\n} from \"@dnd-kit/modifiers\";\nimport {\n  SortableContext,\n  type SortableContextProps,\n  arrayMove,\n  horizontalListSortingStrategy,\n  sortableKeyboardCoordinates,\n  useSortable,\n  verticalListSortingStrategy,\n} from \"@dnd-kit/sortable\";\nimport { CSS } from \"@dnd-kit/utilities\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport * as React from \"react\";\n\nimport { composeEventHandlers, useComposedRefs } from \"@/lib/composition\";\nimport { cn } from \"@/lib/utils\";\nimport * as ReactDOM from \"react-dom\";\n\nconst orientationConfig = {\n  vertical: {\n    modifiers: [restrictToVerticalAxis, restrictToParentElement],\n    strategy: verticalListSortingStrategy,\n    collisionDetection: closestCenter,\n  },\n  horizontal: {\n    modifiers: [restrictToHorizontalAxis, restrictToParentElement],\n    strategy: horizontalListSortingStrategy,\n    collisionDetection: closestCenter,\n  },\n  mixed: {\n    modifiers: [restrictToParentElement],\n    strategy: undefined,\n    collisionDetection: closestCorners,\n  },\n};\n\nconst ROOT_NAME = \"Sortable\";\nconst CONTENT_NAME = \"SortableContent\";\nconst ITEM_NAME = \"SortableItem\";\nconst ITEM_HANDLE_NAME = \"SortableItemHandle\";\nconst OVERLAY_NAME = \"SortableOverlay\";\n\nconst SORTABLE_ERRORS = {\n  [ROOT_NAME]: `\\`${ROOT_NAME}\\` components must be within \\`${ROOT_NAME}\\``,\n  [CONTENT_NAME]: `\\`${CONTENT_NAME}\\` must be within \\`${ROOT_NAME}\\``,\n  [ITEM_NAME]: `\\`${ITEM_NAME}\\` must be within \\`${CONTENT_NAME}\\``,\n  [ITEM_HANDLE_NAME]: `\\`${ITEM_HANDLE_NAME}\\` must be within \\`${ITEM_NAME}\\``,\n  [OVERLAY_NAME]: `\\`${OVERLAY_NAME}\\` must be within \\`${ROOT_NAME}\\``,\n} as const;\n\ninterface SortableRootContextValue<T> {\n  id: string;\n  items: UniqueIdentifier[];\n  modifiers: DndContextProps[\"modifiers\"];\n  strategy: SortableContextProps[\"strategy\"];\n  activeId: UniqueIdentifier | null;\n  setActiveId: (id: UniqueIdentifier | null) => void;\n  getItemValue: (item: T) => UniqueIdentifier;\n  flatCursor: boolean;\n}\n\nconst SortableRootContext =\n  React.createContext<SortableRootContextValue<unknown> | null>(null);\nSortableRootContext.displayName = ROOT_NAME;\n\nfunction useSortableContext(name: keyof typeof SORTABLE_ERRORS) {\n  const context = React.useContext(SortableRootContext);\n  if (!context) {\n    throw new Error(SORTABLE_ERRORS[name]);\n  }\n  return context;\n}\n\ninterface GetItemValue<T> {\n  /**\n   * Callback that returns a unique identifier for each sortable item. Required for array of objects.\n   * @example getItemValue={(item) => item.id}\n   */\n  getItemValue: (item: T) => UniqueIdentifier;\n}\n\ntype SortableProps<T> = DndContextProps & {\n  value: T[];\n  onValueChange?: (items: T[]) => void;\n  onMove?: (\n    event: DragEndEvent & { activeIndex: number; overIndex: number },\n  ) => void;\n  strategy?: SortableContextProps[\"strategy\"];\n  orientation?: \"vertical\" | \"horizontal\" | \"mixed\";\n  flatCursor?: boolean;\n} & (T extends object ? GetItemValue<T> : Partial<GetItemValue<T>>);\n\nfunction Sortable<T>(props: SortableProps<T>) {\n  const {\n    value,\n    onValueChange,\n    collisionDetection,\n    modifiers,\n    strategy,\n    onMove,\n    orientation = \"vertical\",\n    flatCursor = false,\n    getItemValue: getItemValueProp,\n    accessibility,\n    ...sortableProps\n  } = props;\n  const id = React.useId();\n  const [activeId, setActiveId] = React.useState<UniqueIdentifier | null>(null);\n\n  const sensors = useSensors(\n    useSensor(MouseSensor),\n    useSensor(TouchSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    }),\n  );\n  const config = React.useMemo(\n    () => orientationConfig[orientation],\n    [orientation],\n  );\n\n  const getItemValue = React.useCallback(\n    (item: T): UniqueIdentifier => {\n      if (typeof item === \"object\" && !getItemValueProp) {\n        throw new Error(\n          \"getItemValue is required when using array of objects.\",\n        );\n      }\n      return getItemValueProp\n        ? getItemValueProp(item)\n        : (item as UniqueIdentifier);\n    },\n    [getItemValueProp],\n  );\n\n  const items = React.useMemo(() => {\n    return value.map((item) => getItemValue(item));\n  }, [value, getItemValue]);\n\n  const onDragEnd = React.useCallback(\n    (event: DragEndEvent) => {\n      const { active, over } = event;\n      if (over && active.id !== over?.id) {\n        const activeIndex = value.findIndex(\n          (item) => getItemValue(item) === active.id,\n        );\n        const overIndex = value.findIndex(\n          (item) => getItemValue(item) === over.id,\n        );\n\n        if (onMove) {\n          onMove({ ...event, activeIndex, overIndex });\n        } else {\n          onValueChange?.(arrayMove(value, activeIndex, overIndex));\n        }\n      }\n      setActiveId(null);\n    },\n    [value, onValueChange, onMove, getItemValue],\n  );\n\n  const announcements: Announcements = React.useMemo(\n    () => ({\n      onDragStart({ active }) {\n        const activeValue = active.id.toString();\n        return `Grabbed sortable item \"${activeValue}\". Current position is ${active.data.current?.sortable.index + 1} of ${value.length}. Use arrow keys to move, space to drop.`;\n      },\n      onDragOver({ active, over }) {\n        if (over) {\n          const overIndex = over.data.current?.sortable.index ?? 0;\n          const activeIndex = active.data.current?.sortable.index ?? 0;\n          const moveDirection = overIndex > activeIndex ? \"down\" : \"up\";\n          const activeValue = active.id.toString();\n          return `Sortable item \"${activeValue}\" moved ${moveDirection} to position ${overIndex + 1} of ${value.length}.`;\n        }\n        return \"Sortable item is no longer over a droppable area. Press escape to cancel.\";\n      },\n      onDragEnd({ active, over }) {\n        const activeValue = active.id.toString();\n        if (over) {\n          const overIndex = over.data.current?.sortable.index ?? 0;\n          return `Sortable item \"${activeValue}\" dropped at position ${overIndex + 1} of ${value.length}.`;\n        }\n        return `Sortable item \"${activeValue}\" dropped. No changes were made.`;\n      },\n      onDragCancel({ active }) {\n        const activeIndex = active.data.current?.sortable.index ?? 0;\n        const activeValue = active.id.toString();\n        return `Sorting cancelled. Sortable item \"${activeValue}\" returned to position ${activeIndex + 1} of ${value.length}.`;\n      },\n      onDragMove({ active, over }) {\n        if (over) {\n          const overIndex = over.data.current?.sortable.index ?? 0;\n          const activeIndex = active.data.current?.sortable.index ?? 0;\n          const moveDirection = overIndex > activeIndex ? \"down\" : \"up\";\n          const activeValue = active.id.toString();\n          return `Sortable item \"${activeValue}\" is moving ${moveDirection} to position ${overIndex + 1} of ${value.length}.`;\n        }\n        return \"Sortable item is no longer over a droppable area. Press escape to cancel.\";\n      },\n    }),\n    [value],\n  );\n\n  const screenReaderInstructions: ScreenReaderInstructions = React.useMemo(\n    () => ({\n      draggable: `\n        To pick up a sortable item, press space or enter.\n        While dragging, use the ${orientation === \"vertical\" ? \"up and down\" : orientation === \"horizontal\" ? \"left and right\" : \"arrow\"} keys to move the item.\n        Press space or enter again to drop the item in its new position, or press escape to cancel.\n      `,\n    }),\n    [orientation],\n  );\n\n  const contextValue = React.useMemo(\n    () => ({\n      id,\n      items,\n      modifiers: modifiers ?? config.modifiers,\n      strategy: strategy ?? config.strategy,\n      activeId,\n      setActiveId,\n      getItemValue,\n      flatCursor,\n    }),\n    [\n      id,\n      items,\n      modifiers,\n      strategy,\n      config.modifiers,\n      config.strategy,\n      activeId,\n      getItemValue,\n      flatCursor,\n    ],\n  );\n\n  return (\n    <SortableRootContext.Provider\n      value={contextValue as SortableRootContextValue<unknown>}\n    >\n      <DndContext\n        collisionDetection={collisionDetection ?? config.collisionDetection}\n        modifiers={modifiers ?? config.modifiers}\n        sensors={sensors}\n        {...sortableProps}\n        id={id}\n        onDragStart={composeEventHandlers(\n          sortableProps.onDragStart,\n          ({ active }) => setActiveId(active.id),\n        )}\n        onDragEnd={composeEventHandlers(sortableProps.onDragEnd, onDragEnd)}\n        onDragCancel={composeEventHandlers(sortableProps.onDragCancel, () =>\n          setActiveId(null),\n        )}\n        accessibility={{\n          announcements,\n          screenReaderInstructions,\n          ...accessibility,\n        }}\n      />\n    </SortableRootContext.Provider>\n  );\n}\n\nconst SortableContentContext = React.createContext<boolean>(false);\nSortableContentContext.displayName = CONTENT_NAME;\n\ninterface SortableContentProps extends React.ComponentPropsWithoutRef<\"div\"> {\n  strategy?: SortableContextProps[\"strategy\"];\n  children: React.ReactNode;\n  asChild?: boolean;\n  withoutSlot?: boolean;\n}\n\nconst SortableContent = React.forwardRef<HTMLDivElement, SortableContentProps>(\n  (props, forwardedRef) => {\n    const {\n      strategy: strategyProp,\n      asChild,\n      withoutSlot,\n      children,\n      ...contentProps\n    } = props;\n    const context = useSortableContext(CONTENT_NAME);\n\n    const ContentPrimitive = asChild ? Slot : \"div\";\n\n    return (\n      <SortableContentContext.Provider value={true}>\n        <SortableContext\n          items={context.items}\n          strategy={strategyProp ?? context.strategy}\n        >\n          {withoutSlot ? (\n            children\n          ) : (\n            <ContentPrimitive {...contentProps} ref={forwardedRef}>\n              {children}\n            </ContentPrimitive>\n          )}\n        </SortableContext>\n      </SortableContentContext.Provider>\n    );\n  },\n);\nSortableContent.displayName = CONTENT_NAME;\n\ninterface SortableItemContextValue {\n  id: string;\n  attributes: React.HTMLAttributes<HTMLElement>;\n  listeners: DraggableSyntheticListeners | undefined;\n  setActivatorNodeRef: (node: HTMLElement | null) => void;\n  isDragging?: boolean;\n  disabled?: boolean;\n}\n\nconst SortableItemContext =\n  React.createContext<SortableItemContextValue | null>(null);\nSortableItemContext.displayName = ITEM_NAME;\n\ninterface SortableItemProps extends React.ComponentPropsWithoutRef<\"div\"> {\n  value: UniqueIdentifier;\n  asHandle?: boolean;\n  asChild?: boolean;\n  disabled?: boolean;\n}\n\nconst SortableItem = React.forwardRef<HTMLDivElement, SortableItemProps>(\n  (props, forwardedRef) => {\n    const {\n      value,\n      style,\n      asHandle,\n      asChild,\n      disabled,\n      className,\n      ...itemProps\n    } = props;\n    const inSortableContent = React.useContext(SortableContentContext);\n    const inSortableOverlay = React.useContext(SortableOverlayContext);\n\n    if (!inSortableContent && !inSortableOverlay) {\n      throw new Error(SORTABLE_ERRORS[ITEM_NAME]);\n    }\n\n    if (value === \"\") {\n      throw new Error(`\\`${ITEM_NAME}\\` value cannot be an empty string`);\n    }\n\n    const context = useSortableContext(ITEM_NAME);\n    const id = React.useId();\n    const {\n      attributes,\n      listeners,\n      setNodeRef,\n      setActivatorNodeRef,\n      transform,\n      transition,\n      isDragging,\n    } = useSortable({ id: value, disabled });\n\n    const composedRef = useComposedRefs(forwardedRef, (node) => {\n      if (disabled) return;\n      setNodeRef(node);\n      if (asHandle) setActivatorNodeRef(node);\n    });\n\n    const composedStyle = React.useMemo<React.CSSProperties>(() => {\n      return {\n        transform: CSS.Translate.toString(transform),\n        transition,\n        ...style,\n      };\n    }, [transform, transition, style]);\n\n    const itemContext = React.useMemo<SortableItemContextValue>(\n      () => ({\n        id,\n        attributes,\n        listeners,\n        setActivatorNodeRef,\n        isDragging,\n        disabled,\n      }),\n      [id, attributes, listeners, setActivatorNodeRef, isDragging, disabled],\n    );\n\n    const ItemPrimitive = asChild ? Slot : \"div\";\n\n    return (\n      <SortableItemContext.Provider value={itemContext}>\n        <ItemPrimitive\n          id={id}\n          data-dragging={isDragging ? \"\" : undefined}\n          {...itemProps}\n          {...(asHandle ? attributes : {})}\n          {...(asHandle ? listeners : {})}\n          tabIndex={disabled ? undefined : 0}\n          ref={composedRef}\n          style={composedStyle}\n          className={cn(\n            \"focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1\",\n            {\n              \"touch-none select-none\": asHandle,\n              \"cursor-default\": context.flatCursor,\n              \"data-dragging:cursor-grabbing\": !context.flatCursor,\n              \"cursor-grab\": !isDragging && asHandle && !context.flatCursor,\n              \"opacity-50\": isDragging,\n              \"pointer-events-none opacity-50\": disabled,\n            },\n            className,\n          )}\n        />\n      </SortableItemContext.Provider>\n    );\n  },\n);\nSortableItem.displayName = ITEM_NAME;\n\ninterface SortableItemHandleProps\n  extends React.ComponentPropsWithoutRef<\"button\"> {\n  asChild?: boolean;\n}\n\nconst SortableItemHandle = React.forwardRef<\n  HTMLButtonElement,\n  SortableItemHandleProps\n>((props, forwardedRef) => {\n  const { asChild, disabled, className, ...itemHandleProps } = props;\n  const itemContext = React.useContext(SortableItemContext);\n  if (!itemContext) {\n    throw new Error(SORTABLE_ERRORS[ITEM_HANDLE_NAME]);\n  }\n  const context = useSortableContext(ITEM_HANDLE_NAME);\n\n  const isDisabled = disabled ?? itemContext.disabled;\n\n  const composedRef = useComposedRefs(forwardedRef, (node) => {\n    if (!isDisabled) return;\n    itemContext.setActivatorNodeRef(node);\n  });\n\n  const HandlePrimitive = asChild ? Slot : \"button\";\n\n  return (\n    <HandlePrimitive\n      type=\"button\"\n      aria-controls={itemContext.id}\n      data-dragging={itemContext.isDragging ? \"\" : undefined}\n      {...itemHandleProps}\n      {...itemContext.attributes}\n      {...itemContext.listeners}\n      ref={composedRef}\n      className={cn(\n        \"select-none disabled:pointer-events-none disabled:opacity-50\",\n        context.flatCursor\n          ? \"cursor-default\"\n          : \"cursor-grab data-dragging:cursor-grabbing\",\n        className,\n      )}\n      disabled={isDisabled}\n    />\n  );\n});\nSortableItemHandle.displayName = ITEM_HANDLE_NAME;\n\nconst SortableOverlayContext = React.createContext(false);\nSortableOverlayContext.displayName = OVERLAY_NAME;\n\nconst dropAnimation: DropAnimation = {\n  sideEffects: defaultDropAnimationSideEffects({\n    styles: {\n      active: {\n        opacity: \"0.4\",\n      },\n    },\n  }),\n};\n\ninterface SortableOverlayProps\n  extends Omit<React.ComponentPropsWithoutRef<typeof DragOverlay>, \"children\"> {\n  container?: Element | DocumentFragment | null;\n  children?:\n    | ((params: { value: UniqueIdentifier }) => React.ReactNode)\n    | React.ReactNode;\n}\n\nfunction SortableOverlay(props: SortableOverlayProps) {\n  const { container: containerProp, children, ...overlayProps } = props;\n  const context = useSortableContext(OVERLAY_NAME);\n\n  const [mounted, setMounted] = React.useState(false);\n  React.useLayoutEffect(() => setMounted(true), []);\n\n  const container =\n    containerProp ?? (mounted ? globalThis.document?.body : null);\n\n  if (!container) return null;\n\n  return ReactDOM.createPortal(\n    <DragOverlay\n      dropAnimation={dropAnimation}\n      modifiers={context.modifiers}\n      className={cn(!context.flatCursor && \"cursor-grabbing\")}\n      {...overlayProps}\n    >\n      <SortableOverlayContext.Provider value={true}>\n        {context.activeId\n          ? typeof children === \"function\"\n            ? children({ value: context.activeId })\n            : children\n          : null}\n      </SortableOverlayContext.Provider>\n    </DragOverlay>,\n    container,\n  );\n}\n\nconst Root = Sortable;\nconst Content = SortableContent;\nconst Item = SortableItem;\nconst ItemHandle = SortableItemHandle;\nconst Overlay = SortableOverlay;\n\nexport {\n  Root,\n  Content,\n  Item,\n  ItemHandle,\n  Overlay,\n  //\n  Sortable,\n  SortableContent,\n  SortableItem,\n  SortableItemHandle,\n  SortableOverlay,\n};\n",
      "type": "registry:ui",
      "target": "src/components/ui/sortable.tsx"
    },
    {
      "path": "src/components/ui/faceted.tsx",
      "content": "\"use client\";\n\nimport { Check, ChevronsUpDown } from \"lucide-react\";\nimport * as React from \"react\";\n\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n} from \"@/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { cn } from \"@/lib/utils\";\n\ntype FacetedValue<Multiple extends boolean> = Multiple extends true\n  ? string[]\n  : string;\n\ninterface FacetedContextValue<Multiple extends boolean = boolean> {\n  value?: FacetedValue<Multiple>;\n  onItemSelect?: (value: string) => void;\n  multiple?: Multiple;\n}\n\nconst FacetedContext = React.createContext<FacetedContextValue<boolean> | null>(\n  null,\n);\n\nfunction useFacetedContext(name: string) {\n  const context = React.useContext(FacetedContext);\n  if (!context) {\n    throw new Error(`\\`${name}\\` must be within Faceted`);\n  }\n  return context;\n}\n\ninterface FacetedProps<Multiple extends boolean = false>\n  extends React.ComponentProps<typeof Popover> {\n  value?: FacetedValue<Multiple>;\n  onValueChange?: (value: FacetedValue<Multiple> | undefined) => void;\n  children?: React.ReactNode;\n  multiple?: Multiple;\n}\n\nfunction Faceted<Multiple extends boolean = false>(\n  props: FacetedProps<Multiple>,\n) {\n  const {\n    open: openProp,\n    onOpenChange: onOpenChangeProp,\n    value,\n    onValueChange,\n    children,\n    multiple = false,\n    ...facetedProps\n  } = props;\n\n  const [uncontrolledOpen, setUncontrolledOpen] = React.useState(false);\n  const isControlled = openProp !== undefined;\n  const open = isControlled ? openProp : uncontrolledOpen;\n\n  const onOpenChange = React.useCallback(\n    (newOpen: boolean) => {\n      if (!isControlled) {\n        setUncontrolledOpen(newOpen);\n      }\n      onOpenChangeProp?.(newOpen);\n    },\n    [isControlled, onOpenChangeProp],\n  );\n\n  const onItemSelect = React.useCallback(\n    (selectedValue: string) => {\n      if (!onValueChange) return;\n\n      if (multiple) {\n        const currentValue = (Array.isArray(value) ? value : []) as string[];\n        const newValue = currentValue.includes(selectedValue)\n          ? currentValue.filter((v) => v !== selectedValue)\n          : [...currentValue, selectedValue];\n        onValueChange(newValue as FacetedValue<Multiple>);\n      } else {\n        if (value === selectedValue) {\n          onValueChange(undefined);\n        } else {\n          onValueChange(selectedValue as FacetedValue<Multiple>);\n        }\n\n        requestAnimationFrame(() => onOpenChange(false));\n      }\n    },\n    [multiple, value, onValueChange, onOpenChange],\n  );\n\n  const contextValue = React.useMemo<FacetedContextValue<typeof multiple>>(\n    () => ({ value, onItemSelect, multiple }),\n    [value, onItemSelect, multiple],\n  );\n\n  return (\n    <FacetedContext.Provider value={contextValue}>\n      <Popover open={open} onOpenChange={onOpenChange} {...facetedProps}>\n        {children}\n      </Popover>\n    </FacetedContext.Provider>\n  );\n}\n\nfunction FacetedTrigger(props: React.ComponentProps<typeof PopoverTrigger>) {\n  const { className, children, ...triggerProps } = props;\n\n  return (\n    <PopoverTrigger\n      {...triggerProps}\n      className={cn(\"justify-between text-left\", className)}\n    >\n      {children}\n    </PopoverTrigger>\n  );\n}\n\ninterface FacetedBadgeListProps extends React.ComponentProps<\"div\"> {\n  options?: { label: string; value: string }[];\n  max?: number;\n  badgeClassName?: string;\n  placeholder?: string;\n}\n\nfunction FacetedBadgeList(props: FacetedBadgeListProps) {\n  const {\n    options = [],\n    max = 2,\n    placeholder = \"Select options...\",\n    className,\n    badgeClassName,\n    ...badgeListProps\n  } = props;\n\n  const context = useFacetedContext(\"FacetedBadgeList\");\n  const values = Array.isArray(context.value)\n    ? context.value\n    : ([context.value].filter(Boolean) as string[]);\n\n  const getLabel = React.useCallback(\n    (value: string) => {\n      const option = options.find((opt) => opt.value === value);\n      return option?.label ?? value;\n    },\n    [options],\n  );\n\n  if (!values || values.length === 0) {\n    return (\n      <div\n        {...badgeListProps}\n        className=\"flex w-full items-center gap-1 text-muted-foreground\"\n      >\n        {placeholder}\n        <ChevronsUpDown className=\"ml-auto size-4 shrink-0 opacity-50\" />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      {...badgeListProps}\n      className={cn(\"flex flex-wrap items-center gap-1\", className)}\n    >\n      {values.length > max ? (\n        <Badge\n          variant=\"secondary\"\n          className={cn(\"rounded-sm px-1 font-normal\", badgeClassName)}\n        >\n          {values.length} selected\n        </Badge>\n      ) : (\n        values.map((value) => (\n          <Badge\n            key={value}\n            variant=\"secondary\"\n            className={cn(\"rounded-sm px-1 font-normal\", badgeClassName)}\n          >\n            <span className=\"truncate\">{getLabel(value)}</span>\n          </Badge>\n        ))\n      )}\n    </div>\n  );\n}\n\nfunction FacetedContent(props: React.ComponentProps<typeof PopoverContent>) {\n  const { className, children, ...contentProps } = props;\n\n  return (\n    <PopoverContent\n      {...contentProps}\n      align=\"start\"\n      className={cn(\n        \"w-[200px] origin-(--radix-popover-content-transform-origin) p-0\",\n        className,\n      )}\n    >\n      <Command>{children}</Command>\n    </PopoverContent>\n  );\n}\n\nconst FacetedInput = CommandInput;\n\nconst FacetedList = CommandList;\n\nconst FacetedEmpty = CommandEmpty;\n\nconst FacetedGroup = CommandGroup;\n\ninterface FacetedItemProps extends React.ComponentProps<typeof CommandItem> {\n  value: string;\n}\n\nfunction FacetedItem(props: FacetedItemProps) {\n  const { value, onSelect, className, children, ...itemProps } = props;\n  const context = useFacetedContext(\"FacetedItem\");\n\n  const isSelected = context.multiple\n    ? Array.isArray(context.value) && context.value.includes(value)\n    : context.value === value;\n\n  const onItemSelect = React.useCallback(\n    (currentValue: string) => {\n      if (onSelect) {\n        onSelect(currentValue);\n      } else if (context.onItemSelect) {\n        context.onItemSelect(currentValue);\n      }\n    },\n    [onSelect, context.onItemSelect],\n  );\n\n  return (\n    <CommandItem\n      aria-selected={isSelected}\n      data-selected={isSelected}\n      className={cn(\"gap-2\", className)}\n      onSelect={() => onItemSelect(value)}\n      {...itemProps}\n    >\n      <span\n        className={cn(\n          \"flex size-4 items-center justify-center rounded-sm border border-primary\",\n          isSelected\n            ? \"bg-primary text-primary-foreground\"\n            : \"opacity-50 [&_svg]:invisible\",\n        )}\n      >\n        <Check className=\"size-4\" />\n      </span>\n      {children}\n    </CommandItem>\n  );\n}\n\nconst FacetedSeparator = CommandSeparator;\n\nexport {\n  Faceted,\n  FacetedBadgeList,\n  FacetedContent,\n  FacetedEmpty,\n  FacetedGroup,\n  FacetedInput,\n  FacetedItem,\n  FacetedList,\n  FacetedSeparator,\n  FacetedTrigger,\n};\n",
      "type": "registry:ui",
      "target": "src/components/ui/faceted.tsx"
    },
    {
      "path": "src/hooks/use-callback-ref.ts",
      "content": "import * as React from \"react\";\n\n/**\n * @see https://github.com/radix-ui/primitives/blob/main/packages/react/use-callback-ref/src/useCallbackRef.tsx\n */\n\n/**\n * A custom hook that converts a callback to a ref to avoid triggering re-renders when passed as a\n * prop or avoid re-executing effects when passed as a dependency\n */\nfunction useCallbackRef<T extends (...args: never[]) => unknown>(\n  callback: T | undefined,\n): T {\n  const callbackRef = React.useRef(callback);\n\n  React.useEffect(() => {\n    callbackRef.current = callback;\n  });\n\n  // https://github.com/facebook/react/issues/19240\n  return React.useMemo(\n    () => ((...args) => callbackRef.current?.(...args)) as T,\n    [],\n  );\n}\n\nexport { useCallbackRef };\n",
      "type": "registry:hook"
    },
    {
      "path": "src/hooks/use-debounced-callback.ts",
      "content": "/**\n * @see https://github.com/mantinedev/mantine/blob/master/packages/@mantine/hooks/src/use-debounced-callback/use-debounced-callback.ts\n */\n\nimport * as React from \"react\";\n\nimport { useCallbackRef } from \"@/hooks/use-callback-ref\";\n\nexport function useDebouncedCallback<T extends (...args: never[]) => unknown>(\n  callback: T,\n  delay: number,\n) {\n  const handleCallback = useCallbackRef(callback);\n  const debounceTimerRef = React.useRef(0);\n  React.useEffect(\n    () => () => window.clearTimeout(debounceTimerRef.current),\n    [],\n  );\n\n  const setValue = React.useCallback(\n    (...args: Parameters<T>) => {\n      window.clearTimeout(debounceTimerRef.current);\n      debounceTimerRef.current = window.setTimeout(\n        () => handleCallback(...args),\n        delay,\n      );\n    },\n    [handleCallback, delay],\n  );\n\n  return setValue;\n}\n",
      "type": "registry:hook"
    },
    {
      "path": "src/lib/composition.ts",
      "content": "import * as React from \"react\";\n\n/**\n * A utility to compose multiple event handlers into a single event handler.\n * Call originalEventHandler first, then ourEventHandler unless prevented.\n */\nfunction composeEventHandlers<E>(\n  originalEventHandler?: (event: E) => void,\n  ourEventHandler?: (event: E) => void,\n  { checkForDefaultPrevented = true } = {},\n) {\n  return function handleEvent(event: E) {\n    originalEventHandler?.(event);\n\n    if (\n      checkForDefaultPrevented === false ||\n      !(event as unknown as Event).defaultPrevented\n    ) {\n      return ourEventHandler?.(event);\n    }\n  };\n}\n\n/**\n * @see https://github.com/radix-ui/primitives/blob/main/packages/react/compose-refs/src/compose-refs.tsx\n */\n\ntype PossibleRef<T> = React.Ref<T> | undefined;\n\n/**\n * Set a given ref to a given value.\n * This utility takes care of different types of refs: callback refs and RefObject(s).\n */\nfunction setRef<T>(ref: PossibleRef<T>, value: T) {\n  if (typeof ref === \"function\") {\n    return ref(value);\n  }\n\n  if (ref !== null && ref !== undefined) {\n    ref.current = value;\n  }\n}\n\n/**\n * A utility to compose multiple refs together.\n * Accepts callback refs and RefObject(s).\n */\nfunction composeRefs<T>(...refs: PossibleRef<T>[]): React.RefCallback<T> {\n  return (node) => {\n    let hasCleanup = false;\n    const cleanups = refs.map((ref) => {\n      const cleanup = setRef(ref, node);\n      if (!hasCleanup && typeof cleanup === \"function\") {\n        hasCleanup = true;\n      }\n      return cleanup;\n    });\n\n    // React <19 will log an error to the console if a callback ref returns a\n    // value. We don't use ref cleanups internally so this will only happen if a\n    // user's ref callback returns a value, which we only expect if they are\n    // using the cleanup functionality added in React 19.\n    if (hasCleanup) {\n      return () => {\n        for (let i = 0; i < cleanups.length; i++) {\n          const cleanup = cleanups[i];\n          if (typeof cleanup === \"function\") {\n            cleanup();\n          } else {\n            setRef(refs[i], null);\n          }\n        }\n      };\n    }\n  };\n}\n\n/**\n * A custom hook that composes multiple refs.\n * Accepts callback refs and RefObject(s).\n */\nfunction useComposedRefs<T>(...refs: PossibleRef<T>[]): React.RefCallback<T> {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return React.useCallback(composeRefs(...refs), refs);\n}\n\nexport { composeEventHandlers, composeRefs, useComposedRefs };\n",
      "type": "registry:lib"
    },
    {
      "path": "src/lib/data-table.ts",
      "content": "import type {\n  ExtendedColumnFilter,\n  FilterOperator,\n  FilterVariant,\n} from \"@/types/data-table\";\nimport type { Column } from \"@tanstack/react-table\";\n\nimport { dataTableConfig } from \"@/config/data-table\";\n\nexport function getCommonPinningStyles<TData>({\n  column,\n  withBorder = false,\n}: {\n  column: Column<TData>;\n  withBorder?: boolean;\n}): React.CSSProperties {\n  const isPinned = column.getIsPinned();\n  const isLastLeftPinnedColumn =\n    isPinned === \"left\" && column.getIsLastColumn(\"left\");\n  const isFirstRightPinnedColumn =\n    isPinned === \"right\" && column.getIsFirstColumn(\"right\");\n\n  return {\n    boxShadow: withBorder\n      ? isLastLeftPinnedColumn\n        ? \"-4px 0 4px -4px hsl(var(--border)) inset\"\n        : isFirstRightPinnedColumn\n          ? \"4px 0 4px -4px hsl(var(--border)) inset\"\n          : undefined\n      : undefined,\n    left: isPinned === \"left\" ? `${column.getStart(\"left\")}px` : undefined,\n    right: isPinned === \"right\" ? `${column.getAfter(\"right\")}px` : undefined,\n    opacity: isPinned ? 0.97 : 1,\n    position: isPinned ? \"sticky\" : \"relative\",\n    background: isPinned ? \"hsl(var(--background))\" : \"hsl(var(--background))\",\n    width: column.getSize(),\n    zIndex: isPinned ? 1 : 0,\n  };\n}\n\nexport function getFilterOperators(filterVariant: FilterVariant) {\n  const operatorMap: Record<\n    FilterVariant,\n    { label: string; value: FilterOperator }[]\n  > = {\n    text: dataTableConfig.textOperators,\n    number: dataTableConfig.numericOperators,\n    range: dataTableConfig.numericOperators,\n    date: dataTableConfig.dateOperators,\n    dateRange: dataTableConfig.dateOperators,\n    boolean: dataTableConfig.booleanOperators,\n    select: dataTableConfig.selectOperators,\n    multiSelect: dataTableConfig.multiSelectOperators,\n  };\n\n  return operatorMap[filterVariant] ?? dataTableConfig.textOperators;\n}\n\nexport function getDefaultFilterOperator(filterVariant: FilterVariant) {\n  const operators = getFilterOperators(filterVariant);\n\n  return operators[0]?.value ?? (filterVariant === \"text\" ? \"iLike\" : \"eq\");\n}\n\nexport function getValidFilters<TData>(\n  filters: ExtendedColumnFilter<TData>[],\n): ExtendedColumnFilter<TData>[] {\n  return filters.filter(\n    (filter) =>\n      filter.operator === \"isEmpty\" ||\n      filter.operator === \"isNotEmpty\" ||\n      (Array.isArray(filter.value)\n        ? filter.value.length > 0\n        : filter.value !== \"\" &&\n          filter.value !== null &&\n          filter.value !== undefined),\n  );\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "src/lib/format.ts",
      "content": "export function formatDate(\n  date: Date | string | number | undefined,\n  opts: Intl.DateTimeFormatOptions = {},\n) {\n  if (!date) return \"\";\n\n  try {\n    return new Intl.DateTimeFormat(\"en-US\", {\n      month: opts.month ?? \"long\",\n      day: opts.day ?? \"numeric\",\n      year: opts.year ?? \"numeric\",\n      ...opts,\n    }).format(new Date(date));\n  } catch (_err) {\n    return \"\";\n  }\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "src/lib/id.ts",
      "content": "import { customAlphabet } from \"nanoid\";\n\nconst prefixes: Record<string, unknown> = {};\n\ninterface GenerateIdOptions {\n  length?: number;\n  separator?: string;\n}\n\nexport function generateId(\n  prefixOrOptions?: keyof typeof prefixes | GenerateIdOptions,\n  inputOptions: GenerateIdOptions = {},\n) {\n  const finalOptions =\n    typeof prefixOrOptions === \"object\" ? prefixOrOptions : inputOptions;\n\n  const prefix =\n    typeof prefixOrOptions === \"object\" ? undefined : prefixOrOptions;\n\n  const { length = 12, separator = \"_\" } = finalOptions;\n  const id = customAlphabet(\n    \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\",\n    length,\n  )();\n\n  return prefix ? `${prefixes[prefix]}${separator}${id}` : id;\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "src/lib/parsers.ts",
      "content": "import { createParser } from \"nuqs/server\";\nimport { z } from \"zod\";\n\nimport { dataTableConfig } from \"@/config/data-table\";\n\nimport type {\n  ExtendedColumnFilter,\n  ExtendedColumnSort,\n} from \"@/types/data-table\";\n\nconst sortingItemSchema = z.object({\n  id: z.string(),\n  desc: z.boolean(),\n});\n\nexport const getSortingStateParser = <TData>(\n  columnIds?: string[] | Set<string>,\n) => {\n  const validKeys = columnIds\n    ? columnIds instanceof Set\n      ? columnIds\n      : new Set(columnIds)\n    : null;\n\n  return createParser({\n    parse: (value) => {\n      try {\n        const parsed = JSON.parse(value);\n        const result = z.array(sortingItemSchema).safeParse(parsed);\n\n        if (!result.success) return null;\n\n        if (validKeys && result.data.some((item) => !validKeys.has(item.id))) {\n          return null;\n        }\n\n        return result.data as ExtendedColumnSort<TData>[];\n      } catch {\n        return null;\n      }\n    },\n    serialize: (value) => JSON.stringify(value),\n    eq: (a, b) =>\n      a.length === b.length &&\n      a.every(\n        (item, index) =>\n          item.id === b[index]?.id && item.desc === b[index]?.desc,\n      ),\n  });\n};\n\nconst filterItemSchema = z.object({\n  id: z.string(),\n  value: z.union([z.string(), z.array(z.string())]),\n  variant: z.enum(dataTableConfig.filterVariants),\n  operator: z.enum(dataTableConfig.operators),\n  filterId: z.string(),\n});\n\nexport type FilterItemSchema = z.infer<typeof filterItemSchema>;\n\nexport const getFiltersStateParser = <TData>(\n  columnIds?: string[] | Set<string>,\n) => {\n  const validKeys = columnIds\n    ? columnIds instanceof Set\n      ? columnIds\n      : new Set(columnIds)\n    : null;\n\n  return createParser({\n    parse: (value) => {\n      try {\n        const parsed = JSON.parse(value);\n        const result = z.array(filterItemSchema).safeParse(parsed);\n\n        if (!result.success) return null;\n\n        if (validKeys && result.data.some((item) => !validKeys.has(item.id))) {\n          return null;\n        }\n\n        return result.data as ExtendedColumnFilter<TData>[];\n      } catch {\n        return null;\n      }\n    },\n    serialize: (value) => JSON.stringify(value),\n    eq: (a, b) =>\n      a.length === b.length &&\n      a.every(\n        (filter, index) =>\n          filter.id === b[index]?.id &&\n          filter.value === b[index]?.value &&\n          filter.variant === b[index]?.variant &&\n          filter.operator === b[index]?.operator,\n      ),\n  });\n};\n",
      "type": "registry:lib"
    },
    {
      "path": "src/config/data-table.ts",
      "content": "export type DataTableConfig = typeof dataTableConfig;\n\nexport const dataTableConfig = {\n  textOperators: [\n    { label: \"Contains\", value: \"iLike\" as const },\n    { label: \"Does not contain\", value: \"notILike\" as const },\n    { label: \"Is\", value: \"eq\" as const },\n    { label: \"Is not\", value: \"ne\" as const },\n    { label: \"Is empty\", value: \"isEmpty\" as const },\n    { label: \"Is not empty\", value: \"isNotEmpty\" as const },\n  ],\n  numericOperators: [\n    { label: \"Is\", value: \"eq\" as const },\n    { label: \"Is not\", value: \"ne\" as const },\n    { label: \"Is less than\", value: \"lt\" as const },\n    { label: \"Is less than or equal to\", value: \"lte\" as const },\n    { label: \"Is greater than\", value: \"gt\" as const },\n    { label: \"Is greater than or equal to\", value: \"gte\" as const },\n    { label: \"Is between\", value: \"isBetween\" as const },\n    { label: \"Is empty\", value: \"isEmpty\" as const },\n    { label: \"Is not empty\", value: \"isNotEmpty\" as const },\n  ],\n  dateOperators: [\n    { label: \"Is\", value: \"eq\" as const },\n    { label: \"Is not\", value: \"ne\" as const },\n    { label: \"Is before\", value: \"lt\" as const },\n    { label: \"Is after\", value: \"gt\" as const },\n    { label: \"Is on or before\", value: \"lte\" as const },\n    { label: \"Is on or after\", value: \"gte\" as const },\n    { label: \"Is between\", value: \"isBetween\" as const },\n    { label: \"Is relative to today\", value: \"isRelativeToToday\" as const },\n    { label: \"Is empty\", value: \"isEmpty\" as const },\n    { label: \"Is not empty\", value: \"isNotEmpty\" as const },\n  ],\n  selectOperators: [\n    { label: \"Is\", value: \"eq\" as const },\n    { label: \"Is not\", value: \"ne\" as const },\n    { label: \"Is empty\", value: \"isEmpty\" as const },\n    { label: \"Is not empty\", value: \"isNotEmpty\" as const },\n  ],\n  multiSelectOperators: [\n    { label: \"Has any of\", value: \"inArray\" as const },\n    { label: \"Has none of\", value: \"notInArray\" as const },\n    { label: \"Is empty\", value: \"isEmpty\" as const },\n    { label: \"Is not empty\", value: \"isNotEmpty\" as const },\n  ],\n  booleanOperators: [\n    { label: \"Is\", value: \"eq\" as const },\n    { label: \"Is not\", value: \"ne\" as const },\n  ],\n  sortOrders: [\n    { label: \"Asc\", value: \"asc\" as const },\n    { label: \"Desc\", value: \"desc\" as const },\n  ],\n  filterVariants: [\n    \"text\",\n    \"number\",\n    \"range\",\n    \"date\",\n    \"dateRange\",\n    \"boolean\",\n    \"select\",\n    \"multiSelect\",\n  ] as const,\n  operators: [\n    \"iLike\",\n    \"notILike\",\n    \"eq\",\n    \"ne\",\n    \"inArray\",\n    \"notInArray\",\n    \"isEmpty\",\n    \"isNotEmpty\",\n    \"lt\",\n    \"lte\",\n    \"gt\",\n    \"gte\",\n    \"isBetween\",\n    \"isRelativeToToday\",\n  ] as const,\n  joinOperators: [\"and\", \"or\"] as const,\n};\n",
      "type": "registry:file",
      "target": "src/config/data-table.ts"
    },
    {
      "path": "src/types/data-table.ts",
      "content": "import type { DataTableConfig } from \"@/config/data-table\";\nimport type { FilterItemSchema } from \"@/lib/parsers\";\nimport type { ColumnSort, Row, RowData } from \"@tanstack/react-table\";\n\ndeclare module \"@tanstack/react-table\" {\n  // biome-ignore lint/correctness/noUnusedVariables: <explanation>\n  interface ColumnMeta<TData extends RowData, TValue> {\n    label?: string;\n    placeholder?: string;\n    variant?: FilterVariant;\n    options?: Option[];\n    range?: [number, number];\n    unit?: string;\n    icon?: React.FC<React.SVGProps<SVGSVGElement>>;\n  }\n}\n\nexport interface Option {\n  label: string;\n  value: string;\n  count?: number;\n  icon?: React.FC<React.SVGProps<SVGSVGElement>>;\n}\n\nexport type FilterOperator = DataTableConfig[\"operators\"][number];\nexport type FilterVariant = DataTableConfig[\"filterVariants\"][number];\nexport type JoinOperator = DataTableConfig[\"joinOperators\"][number];\n\nexport interface ExtendedColumnSort<TData> extends Omit<ColumnSort, \"id\"> {\n  id: Extract<keyof TData, string>;\n}\n\nexport interface ExtendedColumnFilter<TData> extends FilterItemSchema {\n  id: Extract<keyof TData, string>;\n}\n\nexport interface DataTableRowAction<TData> {\n  row: Row<TData>;\n  variant: \"update\" | \"delete\";\n}\n",
      "type": "registry:file",
      "target": "src/types/data-table.ts"
    }
  ]
}