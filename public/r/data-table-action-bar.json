{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "data-table-action-bar",
  "type": "registry:component",
  "title": "Data Table Action Bar",
  "description": "A action bar component for the data table",
  "dependencies": [
    "@tanstack/react-table",
    "lucide-react",
    "motion"
  ],
  "registryDependencies": [
    "button",
    "tooltip"
  ],
  "files": [
    {
      "path": "src/components/data-table/data-table-action-bar.tsx",
      "content": "\"use client\";\r\n\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Separator } from \"@/components/ui/separator\";\r\nimport {\r\n  Tooltip,\r\n  TooltipContent,\r\n  TooltipTrigger,\r\n} from \"@/components/ui/tooltip\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport type { Table } from \"@tanstack/react-table\";\r\nimport { Loader, X } from \"lucide-react\";\r\nimport { AnimatePresence, motion } from \"motion/react\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\ninterface DataTableActionBarProps<TData>\r\n  extends React.ComponentProps<typeof motion.div> {\r\n  table: Table<TData>;\r\n  visible?: boolean;\r\n  container?: Element | DocumentFragment | null;\r\n}\r\n\r\nfunction DataTableActionBar<TData>({\r\n  table,\r\n  visible: visibleProp,\r\n  container: containerProp,\r\n  children,\r\n  className,\r\n  ...props\r\n}: DataTableActionBarProps<TData>) {\r\n  const [mounted, setMounted] = React.useState(false);\r\n\r\n  React.useLayoutEffect(() => {\r\n    setMounted(true);\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    function onKeyDown(event: KeyboardEvent) {\r\n      if (event.key === \"Escape\") {\r\n        table.toggleAllRowsSelected(false);\r\n      }\r\n    }\r\n\r\n    window.addEventListener(\"keydown\", onKeyDown);\r\n    return () => window.removeEventListener(\"keydown\", onKeyDown);\r\n  }, [table]);\r\n\r\n  const container =\r\n    containerProp ?? (mounted ? globalThis.document?.body : null);\r\n\r\n  if (!container) return null;\r\n\r\n  const visible =\r\n    visibleProp ?? table.getFilteredSelectedRowModel().rows.length > 0;\r\n\r\n  return ReactDOM.createPortal(\r\n    <AnimatePresence>\r\n      {visible && (\r\n        <motion.div\r\n          role=\"toolbar\"\r\n          aria-orientation=\"horizontal\"\r\n          initial={{ opacity: 0, y: 20 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          exit={{ opacity: 0, y: 20 }}\r\n          transition={{ duration: 0.2, ease: \"easeInOut\" }}\r\n          className={cn(\r\n            \"fixed inset-x-0 bottom-6 z-50 mx-auto flex w-fit flex-wrap items-center justify-center gap-2 rounded-md border bg-background p-2 text-foreground shadow-sm\",\r\n            className,\r\n          )}\r\n          {...props}\r\n        >\r\n          {children}\r\n        </motion.div>\r\n      )}\r\n    </AnimatePresence>,\r\n    container,\r\n  );\r\n}\r\n\r\ninterface DataTableActionBarActionProps\r\n  extends React.ComponentProps<typeof Button> {\r\n  tooltip?: string;\r\n  isPending?: boolean;\r\n}\r\n\r\nfunction DataTableActionBarAction({\r\n  size = \"sm\",\r\n  tooltip,\r\n  isPending,\r\n  disabled,\r\n  className,\r\n  children,\r\n  ...props\r\n}: DataTableActionBarActionProps) {\r\n  const trigger = (\r\n    <Button\r\n      variant=\"secondary\"\r\n      size={size}\r\n      className={cn(\r\n        \"gap-1.5 border border-secondary bg-secondary/50 hover:bg-secondary/70 [&>svg]:size-3.5\",\r\n        size === \"icon\" ? \"size-7\" : \"h-7\",\r\n        className,\r\n      )}\r\n      disabled={disabled || isPending}\r\n      {...props}\r\n    >\r\n      {isPending ? <Loader className=\"animate-spin\" /> : children}\r\n    </Button>\r\n  );\r\n\r\n  if (!tooltip) return trigger;\r\n\r\n  return (\r\n    <Tooltip>\r\n      <TooltipTrigger asChild>{trigger}</TooltipTrigger>\r\n      <TooltipContent\r\n        sideOffset={6}\r\n        className=\"border bg-accent font-semibold text-foreground dark:bg-zinc-900 [&>span]:hidden\"\r\n      >\r\n        <p>{tooltip}</p>\r\n      </TooltipContent>\r\n    </Tooltip>\r\n  );\r\n}\r\n\r\ninterface DataTableActionBarSelectionProps<TData> {\r\n  table: Table<TData>;\r\n}\r\n\r\nfunction DataTableActionBarSelection<TData>({\r\n  table,\r\n}: DataTableActionBarSelectionProps<TData>) {\r\n  const onClearSelection = React.useCallback(() => {\r\n    table.toggleAllRowsSelected(false);\r\n  }, [table]);\r\n\r\n  return (\r\n    <div className=\"flex h-7 items-center rounded-md border pr-1 pl-2.5\">\r\n      <span className=\"whitespace-nowrap text-xs\">\r\n        {table.getFilteredSelectedRowModel().rows.length} selected\r\n      </span>\r\n      <Separator\r\n        orientation=\"vertical\"\r\n        className=\"mr-1 ml-2 data-[orientation=vertical]:h-4\"\r\n      />\r\n      <Tooltip>\r\n        <TooltipTrigger asChild>\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"icon\"\r\n            className=\"size-5\"\r\n            onClick={onClearSelection}\r\n          >\r\n            <X className=\"size-3.5\" />\r\n          </Button>\r\n        </TooltipTrigger>\r\n        <TooltipContent\r\n          sideOffset={10}\r\n          className=\"flex items-center gap-2 border bg-accent px-2 py-1 font-semibold text-foreground dark:bg-zinc-900 [&>span]:hidden\"\r\n        >\r\n          <p>Clear selection</p>\r\n          <kbd className=\"select-none rounded border bg-background px-1.5 py-px font-mono font-normal text-[0.7rem] text-foreground shadow-xs\">\r\n            <abbr title=\"Escape\" className=\"no-underline\">\r\n              Esc\r\n            </abbr>\r\n          </kbd>\r\n        </TooltipContent>\r\n      </Tooltip>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport {\r\n  DataTableActionBar,\r\n  DataTableActionBarAction,\r\n  DataTableActionBarSelection,\r\n};\r\n",
      "type": "registry:component",
      "target": "src/components/data-table/data-table-action-bar.tsx"
    }
  ]
}